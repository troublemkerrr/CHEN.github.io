<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHEN&#39;s Space</title>
  
  <subtitle>CHEN&#39;s Blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-25T02:02:57.498Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>CHEN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>链时代招新Questions&amp;Solutions</title>
    <link href="http://example.com/2022/02/25/qs2/"/>
    <id>http://example.com/2022/02/25/qs2/</id>
    <published>2022-02-25T02:04:03.910Z</published>
    <updated>2022-02-25T02:02:57.498Z</updated>
    
    <content type="html"><![CDATA[<h3 id="课程管理系统"><a href="#课程管理系统" class="headerlink" title="课程管理系统"></a>课程管理系统</h3><p><img src="https://s2.loli.net/2022/02/25/UNAOqJtF98K6P2b.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/25/wAQB47NUZHpirCW.png" style="zoom:50%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;课程管理系统&quot;&gt;&lt;a href=&quot;#课程管理系统&quot; class=&quot;headerlink&quot; title=&quot;课程管理系统&quot;&gt;&lt;/a&gt;课程管理系统&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/02/25/UNAOqJtF98K6P</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Coding</title>
    <link href="http://example.com/2022/02/25/code/"/>
    <id>http://example.com/2022/02/25/code/</id>
    <published>2022-02-25T02:03:27.709Z</published>
    <updated>2022-02-25T01:57:26.808Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h4><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum">https://leetcode-cn.com/problems/two-sum</a></p><p>my solution：</p><img src="https://s2.loli.net/2022/02/21/jn3fXMR2vrhecU1.jpg" style="zoom:50%;" /><p>Other people’s solutions：</p><img src="https://s2.loli.net/2022/02/21/KveP8Y3jm7MVyW2.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/21/XeD4jVtyGr8PUiC.jpg" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-两数之和&quot;&gt;&lt;a href=&quot;#1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;1.两数之和&quot;&gt;&lt;/a&gt;1.两数之和&lt;/h4&gt;&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java网络编程、函数式编程</title>
    <link href="http://example.com/2022/02/14/Java5/"/>
    <id>http://example.com/2022/02/14/Java5/</id>
    <published>2022-02-14T14:31:34.422Z</published>
    <updated>2022-02-23T03:59:39.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-网络编程"><a href="#1-网络编程" class="headerlink" title="1.网络编程"></a>1.网络编程</h3><ol><li><p>网络编程入门</p><ul><li><p>网络编程概述</p><p>计算机网络：是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</p><img src="https://s2.loli.net/2022/02/12/QofiIVdO46eT3pH.jpg" style="zoom:50%;" /><p>网络编程：在网络通信协议下，实现网络互连的不同计算机上运行的程序间可以进行数据交换</p></li><li><p>网络编程三要素</p><p>（1）IP地址</p><p>要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而P地址就是这个标识号。也就是设备的标识</p><p>（2）端口</p><p>网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识</p><p>（3）协议</p><p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有UDP协议和TCP协议</p></li><li><p>IP地址</p><img src="https://s2.loli.net/2022/02/12/n4gtN5d3eGyRhOx.jpg" style="zoom:50%;" /><p>​    常用命令：</p><p>​    ipconfig： 查看本机IP地址<br>​    ping IP地址：检查网络是否连通<br>​    特殊IP地址：127.0.0.1；是回送地址，可以代表本机地址，一般用来测试使用</p></li><li><p>InetAddress的使用</p><img src="https://s2.loli.net/2022/02/12/VkIEgwNQyz7joqu.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/12/m6XW4uGrCB7wV8f.jpg" style="zoom:50%;" /></li><li><p>端口：设备上应用程序的唯一标识</p><p>端口号：用两个字节表示的整数，它的取值范围是0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网<br>络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导<br>致当前程序启动失败</p></li><li><p>协议：计算机网络中，连接和通信的规则被称为网络通信协议</p><img src="https://s2.loli.net/2022/02/12/U6CYZPLsBdipqTG.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/12/YmSBqr2hXsDixW7.jpg" style="zoom:50%;" /></li></ul></li><li><p>UDP通信程序</p><ul><li><p>UDP通信原理</p><p>UDP协议是一种不可靠的网络协议，它在通信的两端各建立一个Socket对象，但是这两个Socket只是发送，接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念。<br>Java提供了DatagramSocket类作为基于UDP协议的Socket</p></li><li><p>UDP发送数据</p><img src="https://s2.loli.net/2022/02/12/uJXyqrPOkVmzCNd.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/12/aLi9ECn1F7yYg2D.jpg" style="zoom:50%;" /></li><li><p>UDP接收数据</p><img src="https://s2.loli.net/2022/02/12/wh7bjfJzMH3mcYd.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/12/GCbZP32vHLEkfrj.jpg" style="zoom:50%;" /></li><li><p>UDP通信程序练习<br>按照下面的要求实现程序<br>UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束<br>UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</p><img src="https://s2.loli.net/2022/02/12/3AMXPzurL7oQkli.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/12/2ry8RcfYe71XZ4n.jpg" style="zoom:50%;" /><p>可以有多个SendDemo向一个ReceiveDemo发送数据</p><img src="https://s2.loli.net/2022/02/12/SVFuZjRXnqMiTgd.png" style="zoom:50%;" /></li></ul></li><li><p>TCP通信程序</p><ul><li><p>TCP通信原理</p><img src="https://s2.loli.net/2022/02/12/9avXxYhrojTmIKC.jpg" style="zoom:50%;" /></li><li><p>TCP发送数据</p><img src="https://s2.loli.net/2022/02/12/gYyczTCJxj7SF24.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/12/1XOnzKCbSwQAMW3.jpg" style="zoom:50%;" /></li><li><p>TCP接收数据</p><img src="https://s2.loli.net/2022/02/12/MuIBXWsloQhxDEw.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/12/rLIUkpcWKCOjVSx.jpg" style="zoom:50%;" /></li><li><p>练习１：</p><p>客户端：发送数据，接收服务器反馈<br>服务器：接收数据，给出反馈</p><p><img src="https://s2.loli.net/2022/02/12/Up39rHBOfyIeghQ.jpg" style="zoom: 50%;" /><img src="https://s2.loli.net/2022/02/12/WJ7Cfl1B6QvoZUz.jpg" style="zoom:50%;" /></p></li><li><p>练习２：</p><p>客户端：数据来自于键盘录入，直到输入的数据是886，发送数据结束<br>服务器：接收到的数据在控制台输出</p><p><img src="https://s2.loli.net/2022/02/12/8wWXq3ILZhzmydA.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/12/yFNgIjqtXY9bOcr.jpg" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2022/02/12/j8O9shUxgcYCWtq.png" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/02/12/vseTkU8yXxdwp3j.png" style="zoom: 33%;" /></p></li><li><p>练习３：</p><p>客户端：数据来自于键盘录入，直到输入的数据是886，发送数据结束<br>服务器：接收到的数据写入文本文件</p><img src="https://s2.loli.net/2022/02/12/hE2RJUzlQfPHYm1.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/12/nSaxmfb2oYJ8VFG.png" style="zoom:50%;" /></li><li><p>练习4：</p><p>客户端：数据来自于文本文件<br>服务器：接收到的数据写入文本文件</p><img src="https://s2.loli.net/2022/02/12/O4hNEFW2HVMCt6g.jpg" style="zoom:50%;" /><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20220212204420984.png" alt="image-20220212204420984" style="zoom:50%;" /></li><li><p>练习5：</p><p>客户端：数据来自于文本文件，接收服务器反馈<br>服务器：接收到的数据与入文本文件，给出反馈<br>出现问题：程序一直等待<br>原因：读数据的方法是阻塞式的<br>解决办法：自定义结束标记（如果文本文件中有结束标记，服务器接收不到完整文本）；使用shutdownoutput()方法（推荐）</p><img src="https://s2.loli.net/2022/02/12/BohzsWd7LwD8CRb.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/12/qI9wDm84bJupP3z.jpg" style="zoom:50%;" /></li><li><p>练习6：</p><p>客户端：数据来自于文本文件，接收服务器反馈<br>服务器：接收到的数据写入文本文件，给出反馈，代码用线程进行封装，为每一个客户端开启一个线程，这样就可以接收多个文件了</p><img src="https://s2.loli.net/2022/02/13/UO97cHyrIDaxFG5.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/13/M8hu4HyVaRKb2SD.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/Vj6ah9JfiuYmWMc.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/Zptauy8IJgLkDQ7.jpg" style="zoom:50%;" /></p></li></ul></li></ol><h3 id="2-Lambda表达式"><a href="#2-Lambda表达式" class="headerlink" title="2.Lambda表达式"></a>2.Lambda表达式</h3><ol><li><p>函数式编程思想概述</p><img src="https://s2.loli.net/2022/02/13/8fl4oyMxswiATdD.jpg" style="zoom:50%;" /></li><li><p>体验Lambda表达式</p><img src="https://s2.loli.net/2022/02/13/MNguV3wmdk6Af5R.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/13/sYjBy3mJcUNqGPw.jpg" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/02/13/oHIkJepvTtVrdDz.jpg" style="zoom:50%;" /></p></li><li><p>Lambda表达式的标准格式</p><img src="https://s2.loli.net/2022/02/13/NRr7OUu4e8xKZgC.jpg" style="zoom:50%;" /><p>格式：（形式参数）-＞{代码块}<br>形式参数：如果有多个参数，参数之间用逗号隔开；如果没有参数，留空即可<br>-＞：由英文中画线和大于符号组成，固定写法。代表指向动作<br>代码块：是我们具体要做的事情，也就是以前我们写的方法体内容</p></li><li><p>Lambda表达式的练习</p><p>Lambda表达式的使用前提：(1)有一个接口；(2)接口中有且仅有一个抽象方法</p><ul><li><p>练习1：</p><p>定义一个接口(Eatable)，里面定义一个抽象方法：void eat();<br>定义一个测试类(EatableDemo)，在测试类中提供两个方法：<br>一个方法是useEatable (Eatable e)<br>一个方法是主方法，在主方法中调用useEatable方法</p><p><img src="https://s2.loli.net/2022/02/13/PrVhIljCBiGu9NA.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/Lsymwlx7DpXqtkz.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/13/YxXDgFbemVfcaZ1.jpg" style="zoom:50%;" /></li><li><p>练习2：</p><p>定义一个接口(Flyable)，里面定义一个抽象方法：void fly(String s);<br>定义一个测试类(FlyableDemo)，在测试类中提供两个方法：<br>一个方法是useFlyable(Flyable f)<br>一个方法是主方法，在主方法中调用useFlyable方法</p><p><img src="https://s2.loli.net/2022/02/13/cGI1nv9kAQs5Kqi.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/KQVeGrBIJbAuU1C.jpg" style="zoom:50%;" /></p></li><li><p>练习3：</p><p>定义一个接口(Addable)， 里面定义一个抽象方法：intadd(int xinty);<br>定义一个测试类(AddableDemo)，在测试类中提供两个方法：<br>一个方法是useAddable(Addable a)<br>一个方法是主方法，在主方法中调用useAddable方法</p><p><img src="https://s2.loli.net/2022/02/13/QjkVs6WAi4lIefF.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/FSkhJ8ZDE6dXvBi.jpg" style="zoom:50%;" /></p></li></ul></li><li><p>Lambda表达式的省略模式</p><p>参数类型可以省略。但是有多个参数的情况下，不能只省略一个<br>如果参数有且仅有一个，那么小括号可以省略<br>如果代码块的语句只有一条，可以省略大括号和分号，甚至是retum</p><p><img src="https://s2.loli.net/2022/02/13/pgbUCH7elXOAaIr.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/CSmzTBIOqguPxUD.jpg" style="zoom:50%;" /></p></li><li><p>Lambda表达式的注意事项</p><p>使用Lambda须要有接口，并且要求接口中有且仅有一个抽象方法<br>必须有上下文环境，才能推导出Lambda对应的接口<br>根据局部变量的赋值得知Lambda对应的接口：Runnable r = ()-&gt; System.out.println(“Lambda表达式”);<br>根据调用方法的参数得知Lambda对应的接口：new Thread(()-&gt; System.out.println(“Lambda表达式”)).start();</p><img src="https://s2.loli.net/2022/02/13/4KvrqCNen1JpHXo.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/13/dhnqTPHf9CUwJt2.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/hlNxeFvCzHJKdWb.jpg" style="zoom:50%;" /></p><p>Lambda表达式就是一个接口的实现类。</p><p>Lambda表达式和匿名内部类都代表一个接口的匿名实现。</p></li><li><p>Lambda表达式和匿名内部类的区别</p><p>所需类型不同<br>匿名内部类：可以是接口，也可以是抽象类，还可以是具体类<br>Lambda表达式：只能是接口</p><img src="https://s2.loli.net/2022/02/13/v94zmMoSblkUINP.jpg" style="zoom:50%;" /><p>使用限制不同<br>如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类<br>如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lambda表达式</p><img src="https://s2.loli.net/2022/02/13/d5bJGpUCtNS2VnE.jpg" style="zoom:50%;" /><p>实现原理不同<br>匿名内部类：编泽之后，产生一个单独的.class字节码文件<br>Lambda表达式：编泽之后，没有一个单独的.class字节码文件。对应的字节码会在运行的时候动态生成</p><img src="https://s2.loli.net/2022/02/13/VJHi2PrsohX3ezk.jpg" style="zoom:50%;" /></li></ol><h3 id="3-接口组成更新"><a href="#3-接口组成更新" class="headerlink" title="3.接口组成更新"></a>3.接口组成更新</h3><ol><li><p>接口的组成</p><p>常量：public static final<br>抽象方法：public abstract<br>默认方法(Java 8)<br>静态方法(ava 8)<br>私有方法(Java 9)</p></li><li><p>接口中默认方法</p><p>定义格式：<br>格式：public default 返回值类型 方法名(参数列表){}<br>范例： public default void show3() { }</p><p>注意事项：<br>默认方法不是抽象方法，所以不强制被重写。但是可以被重写，重写的时候去掉default关键字<br>public可以省略，default不能省略</p><p><img src="https://s2.loli.net/2022/02/13/kWjKiQSwY48UFGJ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/Q83Jd1WkNihTIz9.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/gxVqsJjWSdm3KDH.jpg" style="zoom:50%;" /></p></li><li><p>接口中静态方法</p><p>定义格式：<br>格式：public static 返回值类型 方法名 (参数列表){}<br>范例：public static void show() { }<br>接口中静态方法的注意事项：<br>静态方法只能通过接口名调用，不能通过实现类名或者对象名调用<br>public可以省略，static不能省略</p><p><img src="https://s2.loli.net/2022/02/13/zgYAKeqaZUEu9Mc.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/Q1HeCYaVxGmBy7n.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/13/dbIrAXCO23cwzRy.jpg" style="zoom:50%;" /></li><li><p>接口中私有方法</p><p>Java 9中新增了带方法体的私有方法，这其实在Java 8中就埋下了伏笔：Java 8允许在接口中定义带方法体的默认方法<br>和静态方法。这样可能就会引发一个问题：当两个默认方法或者静态方法中包含一段相同的代码实现时，程序必然考虑<br>将这段实现代码抽取成一个共性方法，而这个共性方法是不需要让别人使用的，因此用私有给隐藏起来，这就是Java9<br>增加私有方法的必然性。<br>接口中私有方法的定义格式：<br>格式1：private 返回值类型 方法名(参数列表){ }<br>范例1：private void show() { }<br>格式2：private static 返回值类型 方法名(参数列表){ }<br>范例2：private static void method() { }<br>接口中私有方法的注意事项：<br>默认方法可以调用私有的静态方法和非静态方法<br>静态方法只能调用私有的静态方法</p><p><img src="https://s2.loli.net/2022/02/13/ELTUeRYqVdo2p3z.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/lor3EcFudeKWP95.jpg" style="zoom:50%;" /></p></li></ol><h3 id="4-方法引用"><a href="#4-方法引用" class="headerlink" title="4.方法引用"></a>4.方法引用</h3><ol><li><p>体验方法引用</p><img src="https://s2.loli.net/2022/02/13/KH7AJDejdv6ZtrR.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/T2ebwsroxHYK8Uj.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/T3vQhkEdePB9zKr.jpg" style="zoom:50%;" /></li><li><p>方法引用符</p><img src="https://s2.loli.net/2022/02/13/UBWLxk763s8hRfz.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/13/vJA5yjaVOCSnZTW.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/13/SnbBYuz7jcROI5K.png" style="zoom:50%;" /></p></li><li><p>Lambda表达式支持的方法引用</p><p>常见的引用方式：<br>引用类方法<br>引用对象的实例方法<br>引用类的实例方法<br>引用构造器</p></li><li><p>引用类方法</p><p>引用类方法，其实就是引用类的静态方法<br>格式：类名::静态方法<br>范例：Integer::parselnt<br>Integer类的方法：public static int parselnt(String s) 将此String转换为int类型数据</p><img src="https://s2.loli.net/2022/02/14/RWk7TV6vLFsC3B8.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/14/uvdmRa784yA2enS.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/JdCqyP2ALT1BIGs.jpg" style="zoom:50%;" /></p></li><li><p>引用对象的实例方法</p><p>引用对象的实例方法，其实就是引用类中的成员方法<br>格式：对象::成员方法<br>范例：”HelloWorld”::toUpperCase<br>String类中的方法：public String toUpperCase() 将此String所有字符转换为大写</p><img src="https://s2.loli.net/2022/02/14/eDnL3jiarxbXfK1.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/14/vOSbNFydmo3kL8K.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/oxpZWD92J4XF6Cz.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/14/UDOlgvkbtHA8FQN.jpg" style="zoom:50%;" /></li><li><p>引用类的实例方法</p><p>引用类的实例方法，其实就是引用类中的成员方法<br>格式：类名::成员方法<br>范例：String::substring<br>String类中的方法: public String substring(int beginlndex, int endIndex)<br>从beginlndex开始到endindex结束，截取宇符串。返回一个子串，子串的长度为endndex-beginlndex</p><img src="https://s2.loli.net/2022/02/14/VBuQIS75pDKhRxm.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/AnsNwbpcBfJj25r.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/b6Slgzq8e1mPyf2.jpg" style="zoom:50%;" /></li><li><p>引用构造器</p><p>引用构造器，其实就是引用构造方法<br>格式：类名::new<br>范例：Student::new</p><img src="https://s2.loli.net/2022/02/14/7ymTUli5guoknQE.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/14/G8ltLBJbCWFf2N3.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/NED2k68vsBct71p.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/14/ySY3O4jziQCP2Kw.jpg" style="zoom: 50%;" /></li></ol><h3 id="5-函数式接口"><a href="#5-函数式接口" class="headerlink" title="5.函数式接口"></a>5.函数式接口</h3><ol><li><p>函数式接口概述</p><p>函数式接口：有且仅有一个抽象方法的接口</p><p>它可以用作方法的参数传递，也可以用作局部变量</p><p>Java中的函数式编程体现就是Lambda表达式，所以函数式接口就是可以适用于Lambda使用的接口<br>只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导<br>如何检测一个接口是不是函数式接口呢？<br>@Functionalinterface<br>放在接口定义的上方。如果接口是函数式接口，编泽通过；如果不是，编译失败<br>我们自己定义函数式接口的时候，@Functionallnterface是可选的，就算不写这个注解，只要保证满足函数式接口定<br>义的条件，也照样是函数式接口。但是建议加上该注解。</p><p><img src="https://s2.loli.net/2022/02/14/AMaGTf7b43LJrN6.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/talb3IAS2hOr5ge.jpg" style="zoom:50%;" /></p></li><li><p>函数式接口作为方法的参数</p><img src="https://s2.loli.net/2022/02/14/r2WwXxvYU7NkQEM.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/3569YyFkhvzlIRr.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/XJhKuOZPGV2BTEQ.jpg" style="zoom:50%;" /><p>Lambda表达式的本质其实就是函数式接口的实现类对象，整个表达式作为参数传递。</p></li><li><p>函数式接口作为方法的返回值</p><img src="https://s2.loli.net/2022/02/14/JQFIBTdrVXHmZUD.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/uyVeAYvKtIdbQBr.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/6V4SJ3wMTHdKOUj.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/Vej8IdrBaLiDWbp.jpg" style="zoom:50%;" /><p>Comparator是一个比较器接口，getComparator方法中的Lambda表达式就是定义比较器的规则，最后再用sort方法传递定义好的比较器排列集合。</p></li><li><p>常用的函数式接口<br>Java 8在java.util.function包下预定义了大量的函数式接口供我们使用<br>重点学习下面的4个接口：<br>Supplier接口<br>Consumer接口<br>Predicate接口<br>Function接口</p></li><li><p>Supplier接口</p><p>Supplier&lt; T&gt;：包含一个无参的方法<br>T get()：获得结果<br>该方法不需要参数，它会按照某种实现逻辑(由Lambda表达式实现)返回一个数据<br>Supplier&lt; T&gt;接口也被称为生产型接口，如果我们指定了接口的泛型是什么类型，那么接口中的get方法就会生产什么类型的数据供我们使用</p><img src="https://s2.loli.net/2022/02/14/8BjOwbY9tAMzeul.jpg" style="zoom:50%;" /><p>练习<br>定义一个类(SupplierTest)，在类中提供两个方法：<br>一个方法是：int getMax(Supplier&lt; Integer&gt; sup）用于返回一个int数组中的最大值<br>一个方法是主方法，在主方法中调用getMax方法</p><img src="https://s2.loli.net/2022/02/14/YGJTrt3ieRdMDjm.jpg" style="zoom:50%;" /></li><li><p>Consumer接口</p><p>Consumer&lt; T&gt;：包含两个方法<br>void accept(T t)：对给定的参数执行此操作<br>default Consumer&lt; T&gt; andThen(Consumer after)：返回一个组合的Consumer， 依次执行此操作，然后执行after操作<br>Consumer&lt; T&gt;接口也被称为消费型接口，它消费的数据的数据类型由泛型指定</p><img src="https://s2.loli.net/2022/02/14/6YKrUm1ZtpQzv7q.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/Pu4kMtzW3lKIefA.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/3dLSGYHnIqz8Ofy.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/exaqGC1PH7BmWAg.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/riTwj1nz6QcP9Wa.jpg" style="zoom:50%;" /></li><li><p>Predicate接口</p><p>Predicate &lt; T&gt;常用的四个方法：<br>(1)boolean test(T t)：对给定的参数进行判断(判断逻辑由Lambda表达式实现，返回一个布尔值）<br>(2)default Predicate&lt; T&gt; negate()：返回一个逻辑的否定，对应逻辑非<br>(3)default Predicate&lt; T&gt; and(Predicate other)：返回一个组合判断，对应短路与<br>(4)default Predicate &lt; T&gt; or(Predicate other)：返回一个组合判断，对应短路或<br>Predicate &lt; T&gt;接口通常用于判断参数是否满足指定的条件</p><img src="https://s2.loli.net/2022/02/14/7LfEa9gvDjMnqNO.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/19/wV7zpcmB8rvJFSM.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/HYGwPZxIAeUFSj4.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/CEqSjPXyWgOIbM8.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/7mlbVzqdKrXh6fQ.png" style="zoom:50%;" /></li><li><p>Function接口</p><p>Function&lt;T,R&gt;常用的两个方法：<br>(1)R apply(T t)：将此函数应用于给定的参数<br>(2)default &lt; V&gt; Function andThen(Function after)：返回一个组合函数，首先将该函数应用于输入，然后将after函数应用于结果<br>Function&lt;T,R&gt;接口通常用于对参数进行处理，转换(处理逻辑由Lambda表达式实现)，然后返回一个新的值</p><img src="https://s2.loli.net/2022/02/14/lmIza4xhpUWEtRf.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/LwgNMJPx14HDbVC.jpg" style="zoom:50%;" /></li></ol><img src="https://s2.loli.net/2022/02/14/ezh6SPfUCYb1wji.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/PlF79tyzBnCmiog.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/ki1Td4VqcN9XfMt.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/14/sXlNitzRpf4IUVj.png" style="zoom:50%;" /><h3 id="6-Stream流"><a href="#6-Stream流" class="headerlink" title="6.Stream流"></a>6.Stream流</h3><ol><li><p>体验Stream流</p><img src="https://s2.loli.net/2022/02/19/6ZuT8WniMoplImY.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/19/ru6xK8niCtHBAGb.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/19/Gh8fpmRAXZW7NVj.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/19/87IlaQ4zDtfBim3.jpg" style="zoom:50%;" /></li><li><p>Stream流的生成方式</p><ul><li><p>Stream流的使用</p><ul><li><p>生成流</p><p>通过数据源(集合,数组等)生成流<br>list.stream()</p></li><li><p>中间操作</p><p>一个流后面可以跟随零个或多个中间操作，其目的主要是打开流，做出某种程度的数据过滤/映射，然后返回一个新的流，交给下一个操作使用</p><p>filter()</p></li><li><p>终结操作<br>一个流只能有一个终结操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作</p><p>forEach()</p></li></ul></li><li><p>Stream流的常见生成方式</p><ul><li><p>Collection体系的集合可以使用默认方法stream()生成流</p><p>default Stream&lt; E&gt; stream()</p></li><li><p>Map体系的集合间接的生成流</p></li><li><p>数组可以通过Stream接口的静态方法of(T···values)生成流</p><img src="https://s2.loli.net/2022/02/19/uowzNpcB6UOQybX.jpg" style="zoom:50%;" /></li></ul></li></ul></li><li><p>Stream流的常见中间操作方法</p><ul><li><p>Stream&lt; T&gt; filter(Predicate predicate)：用于对流中的数据进行过滤<br>Predicate接口中的方法       boolean test(T t)：对给定的参数进行判断，返回一个布尔值</p><p><img src="https://s2.loli.net/2022/02/19/9URKFtiwzunC2db.jpg"></p></li><li><p>Stream&lt; T&gt; limit(long maxSize)：返回此流中的元素组成的流，截取前指定参数个数的数据</p></li><li><p>Stream&lt; T&gt; skip(long n)：跳过指定参数个数的数据，返回由该流的剩余元素组成的流</p><img src="https://s2.loli.net/2022/02/19/mJiN2h5VLwyIUet.jpg" style="zoom:50%;" /></li><li><p>static&lt; T&gt; Stream&lt; T&gt; concat(Stream a, Stream b)：合并a和b两个流为一个流</p></li><li><p>Stream&lt; T&gt; distinct()：返回由该流的不同元素 （根据Object.equals(Object)） 组成的流</p><img src="https://s2.loli.net/2022/02/19/Lz9tyDWNXSlGcuE.jpg" style="zoom:50%;" /></li><li><p>Stream&lt; T&gt; sorted()：返回由此流的元素组成的流，根据自然顺序排序</p></li><li><p>Stream&lt; T&gt; sorted(Comparator comparator)：返回由该流的元素组成的流，根据提供的Comparator进行排序</p><img src="https://s2.loli.net/2022/02/19/vo15r9tmA38PsOc.jpg" style="zoom:50%;" /></li><li><p>&lt; R&gt; Stream&lt; R&gt; map(Function mapper)：返回由给定函数应用于此流的元素的结果组成的流<br>Function接口中的方法         R apply(T t)</p></li><li><p>IntStream mapTolnt(TolntFunction mapper)：返回—个IntStream其中包含将给定函数应用于此流的元素的结果<br>Intstream：表示原始int流<br>TolntFunction接口中的方法        int applyAsInt(T value)</p><img src="https://s2.loli.net/2022/02/19/UbZYRqlaFfeDIBg.jpg" style="zoom:50%;" /></li></ul></li><li><p>Stream流的常见终结操作方法</p><ul><li><p>void forEach(Consumer action)：对此流的每个元素执行操作<br>Consumer接口中的方法        void accept(T t)：对给定的参数执行此操作</p></li><li><p>long count()：返回此流中的元素数</p><img src="https://s2.loli.net/2022/02/19/2Qqp4N38Hs9i7Tn.jpg" style="zoom:50%;" /></li></ul></li><li><p>Stream流的练习</p><img src="file:///C:\Users\chen\Documents\Tencent Files\3114652606\Image\C2C\822543E449891C146A2BC845AB95794C.png" alt="img" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/21/hP8YoijgMwmn4VH.jpg" style="zoom:50%;" /></li><li><p>Stream流的收集操作</p><p>对数据使用Stream流的方式操作完毕后，我想把流中的数据收集到集合中，该怎么办呢？<br>Stream流的收集方法：R collect(Collector collector)<br>这个收集方法的参数是一个Collector 接口</p><p>工具类Collectors提供了具体的收集方式，其方法返回值是Collector<br>public static &lt; T&gt; Collector tolist()：把元素收集到List集合中</p><img src="https://s2.loli.net/2022/02/21/yzMpCYf4cA2t5ws.jpg" style="zoom:50%;" /><p>public static &lt; T&gt; Collector toSet()：把元素收集到Set集合中</p><img src="https://s2.loli.net/2022/02/21/oWYNbOqQ8AcVrRd.jpg" style="zoom:50%;" /><p>public static Collector toMap(Function keyMapper,Function valueMapper)：把元素收集到Map集合中</p><p><img src="https://s2.loli.net/2022/02/21/KICGieuHzYVbyWD.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/21/c47jJvZhTODp2PA.jpg" style="zoom: 50%;" /></p></li></ol><h3 id="7-反射"><a href="#7-反射" class="headerlink" title="7.反射"></a>7.反射</h3><ol><li><p>类加载器</p><ul><li><p>类加载</p><p>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载，类的连接，类的初始化这三个步骤来对类进行初始化。如果不出现意外情况，JVM将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化。</p><ul><li>类的加载<br>就是指将class文件读入内存，并为之创建一个java.lang.Class对象<br>任何类被使用时，系统都会为之建立一个java.lang.Class对象</li><li>类的连接<br>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致<br>准备阶段：负责为类的类变量分配内存，并设置默认初始化值<br>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li><li>类的初始化<br>在该阶段，主要就是对类变量进行初始化</li><li>类的初始化步骤<br>假如类还未被加载和连接，则程序先加载并连接该类<br>假如该类的直接父类还未被初始化，则先初始化其直接父类<br>假如类中有初始化语句，则系统依次执行这些初始化语句<br>注意：在执行第2个步骤的时候，系统对直接父类的初始化步骤也遵循初始化步骤1-3</li><li>类的初始化时机：<br>创建类的实例<br>调用类的类方法<br>访问类或者接口的类变量，或者为该类变量赋值<br>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象<br>初始化某个类的子类<br>直接使用java.exe命令来运行某个主类</li></ul></li><li><p>类加载器</p><ul><li><p>类加载器的作用<br>负责将.class文件加载到内存中，并为之生成对应的java.lang.Class对象<br>虽然我们不用过分关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行</p></li><li><p>JVM的类加载机制<br>全盘负责：就是当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加器负责载入，除非显示使用另外一个类加载器来载入<br>父类委托：就是当一个类加载器负责加载某个Class时，先让父类加载器试图加载该Class，只有在父类加载器无法加载该类<br>时才尝试从自己的类路径中加载该类<br>缓存机制：保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只<br>有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存储到缓存区</p></li><li><p>ClassLoader：是负责加载类的对象</p></li><li><p>Java运行时具有以下内置类加载器<br>Bootstrap class loader：它是虛拟机的内置类加载器，通常表示为null ，并日没有父null<br>Platform class loader：平台类加载器可以看到所有平台类，平台类包括由平台类加载器或其祖先定义的Java SE平台API，其实现类和JDK特定的运行时类<br>System class loader：它也被称为应用程序类加载器，与平台类加载器不同。系统类加载器通常用于定义应用程序类路径，模块路径和JDK特定工具上的类<br>类加载器的继承关系：System的父加载器为Platform，而Platform的父加载器为Bootstrap</p></li><li><p>ClassLoader 中的两个方法<br>static ClassLoader getSystemClassLoader()：返回用于委派的系统类加载器<br>ClassLoader getParent()：返回父类加载器进行委派</p><img src="https://s2.loli.net/2022/02/21/LE6XjQkv2RKBA9N.jpg" style="zoom:50%;" /></li><li></li></ul></li></ul></li><li><p>反射</p><ul><li><p>反射概述</p><img src="https://s2.loli.net/2022/02/21/oYCFNXOZtLxmJyV.jpg" style="zoom:50%;" /><p>Java反射机制：是指在运行时去获取一个类的变量和方法信息。然后通过获取到的信息来创建对象，调用方法的一种机制。由于这种动态性，可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以扩展。</p></li><li><p>获取Class类的对象</p><p>我们要想通过反射去使用一个类，首先我们要获取到该类的字节码文件对象，也就是类型为Class类型的对象。<br>这里我们提供三种方式获取Class类型的对象：<br>(1)使用类的class属性来获取该类对应的Class对象。举例：Student.class将会返回Student类对应的Class对象<br>(2)调用对象的getClass()方法，返回该对象所属类对应的Class对象。该方法是Objed类中的方法，所有的Java对象都可以调用该方法<br>(3)使用Class类中的静态方法forName(String className)，该方法需要传入字符串参数，该字符串参数的值是某个类的全路径，也就是完整包名的路径</p><p><img src="https://s2.loli.net/2022/02/21/nDNVMZUFIqAxBp7.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/21/mOjtJsIFgZ4T7oN.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/21/qfo2hatRVkGUxHY.jpg" style="zoom:50%;" /></li><li><p>反射获取构造方法并使用</p><ul><li><p>Class类中用于获取构造方法的方法：<br>Constructor <?>[] getConstructors()：返回所有公共构造方法对象的数组Constructor <?>[] getDeclaredConstructors()：返回所有构造方法对象的数组<br>Constructor &lt; T&gt; getconstructor(Class<?> ··· parameterTypes)：返回单个公共构造方法对象Constructor < T> getDeclaredConstructor(Class<?> ··· parameterTypes)：返回单个构造方法对象</p></li><li><p>Constructor类中用于创建对象的方法：<br>T newlnstance(Object ··· initargs)：根据指定的构造方法创建对象</p><img src="https://s2.loli.net/2022/02/22/CLS6GBVitsorHcT.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/22/KTpAkbcSYr5ZlGF.jpg" style="zoom:50%;" /><p>练习1：通过反射实现如下操作<br>Student s =new Student(“林青霞”,30,”西安”);<br>System.out.printin(s);</p><img src="https://s2.loli.net/2022/02/22/aLG3tbETc2BRZfh.jpg" style="zoom:50%;" /><p>练习2：通过反射实现如下操作<br>Student s = new Student(”林青霞”);<br>System.out.println(s);</p><img src="https://s2.loli.net/2022/02/22/FxZWYOHCvtPagGV.jpg" style="zoom:50%;" /></li></ul></li><li><p>反射获取成员变量并使用</p><ul><li><p>Class类中用于获取成员变量的方法<br>Field[] getFields()：返回所有公共成员变量对象的数组<br>Field[] getDeclaredFields()：返回所有成员变量对象的数组<br>Field getField(String name)：返回单个公共成员变量对象<br>Field getDeclaredField(String name)：返回单个成员变量对象</p></li><li><p>Field类中用于给成员变量赋值的方法<br>void set(Object obj, Object value)：给obi对象的成员变量赋值为value</p><img src="https://s2.loli.net/2022/02/22/PUS5u1RzfXVo6YI.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/22/c5xJBPUu2fqHCnd.jpg" style="zoom:50%;" /><p>练习：</p><img src="https://s2.loli.net/2022/02/22/wGxVmv56NkJWZMK.jpg" style="zoom:50%;" /></li></ul></li><li><p>反射获取成员方法并使用</p><ul><li><p>Class类中用于获取成员方法的方法<br>Method[] getMethods()：返回所有公共成员方法对象的数组，包括继承的<br>Method[] getDeclared Methods()：返回所有成员方法对象的数组，不包括继承的<br>Method getMethod(String name, Class<?> ··· parameterTypes)：返回单个公共成员方法对象Method getDeclared Method(String name, Class<?> ··· parameterTypes)：返回单个成员方法对象</p></li><li><p>Method类中用于调用成员方法的方法</p><p>Object invoke(Object obi, Object..args)：调用obj对象的成员方法，参数是args,返回值是Object类型<br><img src="https://s2.loli.net/2022/02/22/WU9AEnXb5NlFCM6.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/22/hOz7ZawCvpWTR84.jpg" style="zoom:50%;" /></p><p>练习：</p><p><img src="https://s2.loli.net/2022/02/22/WownBJmPQt2rjLT.jpg"></p></li></ul></li><li><p>越过泛型检查</p><p><img src="https://s2.loli.net/2022/02/22/wfSZA4x13RUcGlW.jpg"></p></li><li><p>通过配置文件运行类中的方法</p><p>修改配置文件中的内容就可以运行不同类中的方法。</p><p><img src="https://s2.loli.net/2022/02/22/zyq32ETXS6FvIGC.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/22/CZcKHhsndj1S5AG.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/22/CwK9pzW7gjYhlsm.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/22/1VmU8ysKCrZN9Pw.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/22/R8gKS7ktBuDCHwb.jpg" style="zoom:50%;" /></p></li></ul></li></ol><h3 id="8-模块化"><a href="#8-模块化" class="headerlink" title="8.模块化"></a>8.模块化</h3><ol><li><p>模块化概述</p><p>Java语言随着这些年的发展已经成为了一门影响深远的编程语言，无数平台、系统都采用)ava语言编写。但是，伴随着发展，Java也越来越庞大，逐新发展成为一门 〝臃肿” 的语言。而且，无论是运行一个大型的软件系统，还是运行一个小的程序，即使程序只需要使用Java的部分核心功能，JVM也要加载整个JRE环境。<br>为了给Java 瘦身”，让ava实现轻量化，Java 9正式的推出了模块化系統。Java被拆分为N多个模块，并允许Java程序可以根据需要选择加载程序必须的Java模块，这样就可以让Javal以轻量化的方式来运行。<br>其实，Java 7的时候已经提出了模块化的概念，但由于其过于复杂，Java7，Java 8都一直末能真正推出，直到lava9才真正成熟起来。对于Java语言来说，模块化系统是一次真正的自我革新，这种革新使得“古老而庞大〞的Java语言重新焕发年轻的活力。</p><img src="https://s2.loli.net/2022/02/22/aEQA8ZGSWrYkzyu.jpg" style="zoom:50%;" /></li><li><p>模块的基本使用</p><p>模块的基本使用步骤:</p><ul><li><p>创建模块(按照以前的讲解方式创建模块，创建包，创建类，定义方法）<br>为了体现模块的使用，我们创建2个模块。一个是myOne,一个是myTwo</p><p><img src="https://s2.loli.net/2022/02/23/8wkFZ3hepqGCxOi.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/23/AkPo8p26zObxs1W.png" style="zoom:50%;" /></p></li><li><p>在两个模块的src目录下新建一个名为module-info.java的描述性文件，该文件专门定义模块名，访问权限，模块依赖等信息<br>描述性文件中使用模块导出和模块依赖来进行配置并使用</p></li><li><p>模块中所有末导出的包都是模块私有的，它们是不能在模块之外被访问的<br>在myOne这个模块下的描述性文件中配置模块导出<br>模块导出格式：exports包名；</p></li><li><p>一个模块要访问其他的模块，必须明确指定依赖哪些模块，未明确指定依赖的模块不能访问<br>在myTwo这个模块下的描述性文件中配置模块依赖<br>模块依赖格式：requires 模块名;<br>注意：写模块名报错，需要按下Alt+Enter提示，然后选择模块依赖</p></li><li><p>在myTwo这个模块的类中使用依赖模块下的内容</p><p><img src="https://s2.loli.net/2022/02/23/g2GbtZeP3aTrd5M.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/23/qNkHjtZpzuYsQ9l.jpg" alt="img" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/23/zvVDRg2IyoSQcxn.jpg" style="zoom:50%;" /></li></ul></li><li><p>模块服务的使用</p><p>服务：从Java6开始，Java提供了一种服务机制，允许服务提供者和服务使用者之间完成解耦。简单的说，就是服务使用者只面向接口编程，但不清楚服务提供者的实现类。<br>Java 9的模块化系统则进一步的简化了Java的服务机制。Java 9允许将服务接口定义在一个模块中，并使用uses语句来声明该服务接口，然后针对该服务接口提供不同的服务实现类，这些服务实现类可以分布在不同的模块中，服务实现模块则使用provides语句为服务接口指定实现类。服务使用者只需要面向接口编桯即可。</p><p>模块服务的使用步骤：</p><ul><li><p>在myOne模块下创建一个包com.itheima_03， 在该包下提供一个接口，接口中定义一 个抽象方法<br>public interface MyService{</p><pre><code>void service();</code></pre><p>}</p></li><li><p>在com.itheima_03包下创建一个包impl，在该包下提供接口的两个实现类theima和Czxy</p></li><li><p>在myOne这个模块下的描述性文件中添加如下配置<br>模块导出：exports com.itheima_03;<br>服务提供：provides MyService with ltheima;    指定MyService的服务实现类是Itheima</p></li><li><p>在myTwo这个模块下的描述性文件中添加如下配置<br>声明服务接口：uses MyService;</p></li><li><p>在myTwo这个模块的类中使用MyService接口提供的服务<br>Serviceloader ：一种加载服务实现的工具</p><img src="https://s2.loli.net/2022/02/23/C8bnP4azAZ23Xpe.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/23/kOE3QGpyIHzovP8.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/23/5tZU6uVyeEBqY2m.jpg" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2022/02/23/vAtlsU4Wcp9XTmx.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/23/DyjnY2CEuJroF8g.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/23/zTZ2E8lJL3OVvox.jpg" style="zoom:50%;" /></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-网络编程&quot;&gt;&lt;a href=&quot;#1-网络编程&quot; class=&quot;headerlink&quot; title=&quot;1.网络编程&quot;&gt;&lt;/a&gt;1.网络编程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;网络编程入门&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;网络编程概述&lt;/p&gt;
&lt;p&gt;计算机网络：是指</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Claire&#39;s Art Show</title>
    <link href="http://example.com/2022/02/10/art/"/>
    <id>http://example.com/2022/02/10/art/</id>
    <published>2022-02-10T09:02:30.901Z</published>
    <updated>2022-02-10T09:02:06.730Z</updated>
    
    <content type="html"><![CDATA[<p>2021/12/13</p><p><img src="https://s2.loli.net/2022/01/21/EDl5TA94tbHnOvd.jpg"></p><p>2022/01/28</p><p><img src="https://s2.loli.net/2022/02/10/wRh6UrIaTQ4ZFzt.jpg"></p><p>2022/02/07</p><p><img src="https://s2.loli.net/2022/02/10/D1fdQh2sCKjWIO7.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2021/12/13&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/01/21/EDl5TA94tbHnOvd.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;2022/01/28&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>择栖招新Questions&amp;Solutions</title>
    <link href="http://example.com/2022/02/08/qs/"/>
    <id>http://example.com/2022/02/08/qs/</id>
    <published>2022-02-08T09:53:12.902Z</published>
    <updated>2022-02-10T04:49:03.487Z</updated>
    
    <content type="html"><![CDATA[<p>现在是2月7号的13点47分，距离招新截止只有一周时间了。</p><p>回想起刚放寒假时定下的宏伟目标（跟着黑马的视频边看边敲学完JavaSE，再看书和笔记复习一遍），再看现在的凄凉处境（刚学完IO流，招新题只写了文字填空题和商品管理系统，在京东上买的《Java核心技术卷1》甚至还没发货），我：</p><p><img src="https://s2.loli.net/2022/02/07/gRH3yEUVcJOdlSK.jpg"></p><p>凭陈某对自己的了解，JavaSE99%是学不完了。而且就算在这几天把课刷完，效果肯定也不会好，不如就把线程学了、做完招新题，再好好复习一下前面学的知识吧。</p><p>好了废话不多说，以下是我做择栖招新题时的思考过程，还有遇到的困难和解决方案：</p><hr><h3 id="商品管理系统"><a href="#商品管理系统" class="headerlink" title="商品管理系统"></a>商品管理系统</h3><p>学完ArrayList集合我就知道我可以试试写这个题了（因为看到后面几节教学视频在写学生管理系统，这和商品管理系统简直是换汤不换药嘛。当然我是先自己写了再看视频的！）</p><p>最开始的想法是定义两个类</p><p>(1)Product类：里面有成员变量、构造方法和get与set方法</p><p>(2)ProductManager类：main方法用do···while循环（因为至少执行一次）嵌套switch语句实现，再定义增、查、删三个方法并在main方法中调用</p><img src="https://s2.loli.net/2022/02/07/6cwC2M1bhG5staS.jpg" style="zoom: 25%;" /><p>一开始，main方法就出问题。</p><img src="https://s2.loli.net/2022/02/07/7dCmz9PGniuQJ1q.jpg" style="zoom:50%;" /><p>我当时觉得很奇怪，明明上面定义了choice啊，怎么会报错呢。写完三个方法还是花了不少时间了，有点累，于是我决定把这个问题放一放，先干点别的去。而当我写完另一个程序并执行时，意想不到的事情发生了！</p><p><img src="https://s2.loli.net/2022/02/07/CHcNnfsiuRdqOg8.png"></p><p>？我现在运行的程序跟ProductManager又没有任何关系咯，干嘛非把之前的错挑出来。这IDEA真是……哪壶不开提哪壶。</p><p>行吧既然如此我就再好好研究一下。把鼠标放到标红的choice上，提示以下信息：</p><img src="https://s2.loli.net/2022/02/07/qD2nANvrWxyVXsT.png" style="zoom:50%;" /><p>是因为choice变量定义在do里面，while无法访问，把choice变量定义在do···while循环外就好了。</p><p>我以为这样子就万事大吉了，没想到运行时又出了问题。</p><p><img src="https://s2.loli.net/2022/02/07/eCjVH1rWbalpmBE.jpg"></p><p>实现添加商品功能时，根本不给我输入商品名称的机会啊！</p><p>上CSDN搜索后发现：</p><blockquote><p>nextInt()方法会读取下一个int型标志的token，但是焦点不会移动到下一行，仍然处在这一行上。当使用nextLine()方法时会读取当前行剩余的所有的内容，包括换行符，然后把焦点移动到下一行的开头（相当于消除掉了换行）。所以这样就无法接收到下一行输入的String类型的变量。</p><p>解决办法：</p><p>(1)如果待输入的字符串中不包含空格的话，可以使用next()方法，不使用nextLine()方法，next()方法一定要读取到有效字符后才可以结束输入，对输入有效字符之前遇到的“空格，tab，换行”结束符略过不计（next()的结束符是三种，而nextLine()中只有一种结束符——换行）。因此，虽然nextInt()有一个换行留了下来，但是next()会将其过滤掉，不影响我们输入字符串。<br>(2)但是有时待输入的字符串中包含空格，需要按行为单位输入，此时需要使用nextLine()方法了，那么应对措施就是在使用nextLine()之前再先调用一次nextLine()，使其不在nextInt()哪一行，转入下一行进行读入，这样就可以实现待输入字符串的输入了。</p></blockquote><p>于是我把nextLine()改为next()，就可以正常运行了。</p><p>自己写完后看了教学视频实现了进一步优化，比如增加了修改商品这一功能等。也学习了编写程序的不同思路，比如main方法中，我用的是do···while循环，而老师用的是无限while循环，在输入choice的值为5时用System.exit(0);实现JVM退出。</p><p>以上是刚学完ArrayList集合写的，而现在我学完IO流啦。其实之前我就发现这个商品管理系统有一个问题：如果程序运行终止了，集合array中所存储的商品信息就都消失了，重新运行程序就必须重新添加商品，然后才能进行查看、修改等操作。也就是说如果真正想要管理商品，就不能终止程序，这太不切实际了。而把商品信息存入文件中可以解决这一问题。</p><p>实现思路：</p><p>(1)如果在增删改查四个方法中加入读写文件的具体操作就太麻烦了，不如再定义一个FileOperator类，里面定义读写文件的方法，然后在ProductManager类里面创建FileOperator类对象，就可以方便地调用其中的方法了。</p><p>(2)读取文件需要一行一行地读，所以使用字符缓冲输入流BufferedReader实现。</p><p>(3)当要修改（包括了添加、删除两种情况）文件时，先把文件中的信息逐行读取出来，存入一个集合中，在集合中实现对商品信息的修改，然后清空原有文件，再将操作后的集合内容写入文件。RandomAccessFile类虽然可以实现自由访问文件的任意位置并对其进行修改，但因为商品信息长度不一无法准确定位，故没有使用。</p><p>这个过程中遇到了很多问题，比如：把String类型数字转为int类型时，不小心把parseInt误写为getInteger；对文件的操作执行完毕后没有及时释放资源……</p><p>奇异输出结果大赏：<img src="https://s2.loli.net/2022/02/08/kwc8m7Ms15JbO4D.png" style="zoom: 50%;" /></p><p>改了老半天才终于能正常运行了。在此我要特别感谢小张同学，半夜一两点钟不睡觉陪着我改代码，还教给我许多有用的经验，真是感天动地！我一定会好好报答你对我的恩情！！</p><img src="https://s2.loli.net/2022/02/08/nrRh4qd9WKfFlzY.jpg" style="zoom:67%;" /><p>​                                                                                                        十根金条送给你</p><p>然后我又利用TreeSet集合实现了对商品的整理功能（按商品编号从小到大排序）。</p><p>总结：</p><p>(1)写一部分就执行一下，确保写的没问题再继续写</p><p>(2)输出结果不对就多输出几次，找找规律</p><h3 id="回形数格式方阵"><a href="#回形数格式方阵" class="headerlink" title="回形数格式方阵"></a>回形数格式方阵</h3><p>最开始想用一维数组实现，但如何根据键盘输入值定义不同数量、不同名字的数组就是个问题。然后我想，Java中应该也有二维数组吧？上CSDN查了一下果然有，那就用二维数组实现好了。</p><p>实现思路：</p><p>(1)定义一个n行n列的二维数组，n由键盘输入。</p><p>(2)找规律，由外到内赋值。</p><img src="https://s2.loli.net/2022/02/09/8j9KuryXlZfAcox.jpg" style="zoom:25%;" /><p>规律：先分析二维数组的坐标。把方阵看成上下左右四块，每一块按箭头方向走时，只有j、k其中一个参数在递增或递减，另外一个保持不变。而且越往里面走，递增/递减的范围越小。在二维数组的坐标螺旋往内变化的同时，把i值依次赋给对应的坐标，i在这个过程中递增，直至i的值等于n的平方为止。</p><p>代码实现：外层定义一个for循环，里面四条while语句分别依次对应上、右、下、左四块，当j/k的值在限定范围内（引入参数p、q实现，for循环每执行一遍，就代表转完一圈，参数p、q也会改变，使j、k变化范围缩小）时，j/k自增或自减，与此同时把i值赋给arr[j] [k]并使i自增。开始我把限定i的范围的语句写在for循环那个( )里面，但是这样做的话，i在进入for循环时还在预期范围内，而在for循环内部几个while语句中多次自增后可能越过预期范围。此时限定i的范围的语句已不能约束i了。于是我对for循环用OUT进行标记，并且在每一条while语句中都加入了对i值的判断，如果i增加到了预期范围的边界，就直接跳出外层for循环。</p><p>(3)打印输出二维数组。</p><p>采用了两个for循环嵌套。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;%4d&quot;</span>,arr[a][b]);     <span class="comment">//&quot;%4d&quot;表示按4位的固定位宽输出整型数值</span></span><br></pre></td></tr></table></figure><p>后来我又加入了对错误输入的判断。比如输入21，会提示”您输入的数字不在范围内“。</p><h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><p>数组拼接直接用现成的System.arraycopy( )方法，新定义一个数组c用来接收a、b中的元素，后续用冒泡排序的方法操作就可以了。</p><p>最后打印输出c中元素，可以看到c中元素按从小到大的顺序排列。</p><h3 id="图形面积"><a href="#图形面积" class="headerlink" title="图形面积"></a>图形面积</h3><p>就是按要求一步一步做。不过在这个过程中，我发现不能直接用键盘在IDEA中输入Π，可又不愿意直接取3.14的近似值，怎么办呢？我在CSDN上查到，可以在IDEA里面装一个包含数学符号的插件——Spec &amp; Math symbols</p><img src="https://s2.loli.net/2022/02/10/YrVlDvNjGL6uHOq.png" style="zoom:50%;" /><p>下载好之后输入pi就能打出Π了。打是打出来了，但是这个Π似乎只是一个符号而已。</p><p><img src="https://s2.loli.net/2022/02/10/uydRJL6xHValBOY.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/10/ESh41ZMKsafNYvm.png"></p><p>那我还是直接用3.14吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在是2月7号的13点47分，距离招新截止只有一周时间了。&lt;/p&gt;
&lt;p&gt;回想起刚放寒假时定下的宏伟目标（跟着黑马的视频边看边敲学完JavaSE，再看书和笔记复习一遍），再看现在的凄凉处境（刚学完IO流，招新题只写了文字填空题和商品管理系统，在京东上买的《Java核心技术卷</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java线程与IO</title>
    <link href="http://example.com/2022/02/04/Java4/"/>
    <id>http://example.com/2022/02/04/Java4/</id>
    <published>2022-02-04T13:47:35.705Z</published>
    <updated>2022-02-11T13:39:57.428Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-IO流"><a href="#1-IO流" class="headerlink" title="1.IO流"></a>1.IO流</h3><ol><li><p>File</p><ul><li><p>File类概述和构造方法</p><p>File：它是文件和目录路径名的抽象表示。</p><p>文件和目录是可以通过File封装成对象的。</p><p>对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的。将来是要通过具体的操作把这个路径的内容转换为具体存在的。</p><img src="https://s2.loli.net/2022/02/03/H5POE7xbIG1mVZf.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/03/MdPo91zVAkmqnTL.jpg" style="zoom:50%;" /></li><li><p>File类创建功能</p><img src="https://s2.loli.net/2022/02/03/f4cCjuV1ry7e3Ia.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/03/Xm28edEntjvsIwz.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/03/BLwlWAMOgd8JjNi.jpg" style="zoom:50%;" /><p>名字不能重复（即使是一个文件一个目录也无法创建）</p></li><li><p>File类判断和获取功能</p><img src="https://s2.loli.net/2022/02/04/XYOBR39ygmwNPF5.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/KJAkijTQqNhxGO9.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/pFsSPWjRt97zJiq.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/hQm5dziFpUGyvAb.jpg" style="zoom:50%;" /></li><li><p>File类删除功能</p><img src="https://s2.loli.net/2022/02/04/jBrnG8yAMTgZvWD.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/KWR3AiGXtxqCDdf.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/SEyYXrLT1C4oJfk.png" style="zoom:50%;" /></li><li><p>递归（方法定义中调用方法本身）</p><p>解决问题的思路：把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来解决</p><p>​                                只需少量程序就可描述出解题过程所需要的多次重复计算</p><p>需要两个内容：递归出口（否则会内存溢出 StackOverflowError）</p><p>​                            递归规则（与原问题相似的规模较小的问题）</p><img src="https://s2.loli.net/2022/02/04/TAYEu6rcDS9qgUv.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/o18OczBPLIkbmVC.jpg" style="zoom:50%;" /></li><li><p>案例：遍历目录</p><img src="https://s2.loli.net/2022/02/04/7MyYEsmRlnAWqPz.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/URokD3dVnOru9Fi.jpg" style="zoom:50%;" /></li></ul></li><li><p>字节流</p><ul><li><p>IO流概述和分类</p><p>IO流概述：</p><p>IO：输入/输出(Input/Output)</p><p>流：一种抽象概念，是对数据传输的总称。也就是说数据在设备间的传输称为流，流的本质是数据传输。</p><p>IO流就是用来处理设备间数据传输问题的。常见的应用：文件复制、文件上传、文件下载</p><p>IO流分类：</p><ul><li><p>按照数据的流向（读入写出）</p><p>​    输入流：读数据</p><p>​    输出流：写数据</p></li><li><p>按照数据类型</p><p>​    字节流（字节输入流、字节输出流）</p><p>​    字符流（字符输入流、字符输出流）</p><p>一般按照数据类型来分。</p><p>如果数据通过记事本打开可以读懂，就用字符流，否则用字节流。如果不知道该用哪种流，就用字节流。</p></li></ul></li><li><p>字节流写数据</p><p>字节流抽象基类</p><ul><li>InputSteam：这个抽象类是表示字节输入流的所有类的超类</li><li>OutputSteam：这个抽象类是表示字节输出流的所有类的超类</li><li>子类名特点：以其父类名作为子类名的后缀</li></ul><p>FileOutputSteam：文件输出流用于将数据写入File</p><p>FileOutputSteam(String name)：创建文件输出流以指定的名称写入文件</p><p>使用字节输出流写数据的步骤：</p><p>(1)创建字节输出流对象(调用系统功能创建了文件，创建字节输出流对象，让字节输出流对象指向文件)</p><p>(2)调用字节输出流对象的写数据方法</p><p>(3)释放资源(关闭此文件输出流并释放与此流相关联的任何系统资源)</p><img src="https://s2.loli.net/2022/02/04/MIHahPeDprs3lBx.jpg" style="zoom:50%;" /><p>字节流写数据的三种方式：</p><img src="https://s2.loli.net/2022/02/04/Pz6Xg1pCqVIZHYD.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/AVuOyqogKmEQCzS.jpg" style="zoom:50%;" /><p>换行与追加写入：</p><img src="https://s2.loli.net/2022/02/04/KLlsNXAUbEi5dGZ.jpg" style="zoom:50%;" /><p>异常处理：</p><img src="https://s2.loli.net/2022/02/04/YA1CqKBeI6DgRkJ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/OSEgh2Fq1PIB7zn.jpg" style="zoom:50%;" /></li><li><p>字节流读数据（一次读一个字节数据）</p><p>FileInputStream:从文件系统中的文件获取字节</p><p>FileInputStream(String name)：通过打开与实际文件的连接来创建一个FileInputStream，该文件由文件系统中的路径名name命名</p><p>使用字节输入流读数据的步骤：</p><p>(1)创建字节输入流对象</p><p>(2)调用字节输入流对象的读数据方法</p><p>(3)释放资源</p><p><img src="https://s2.loli.net/2022/02/04/UTykCPO7jt4Q5Jx.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/zfyj8vkUo14YGAR.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/esrvpGjnEg1HDkt.jpg" style="zoom:50%;" /></p><p>read()的返回值类型是byte类型的ASCII码。</p><p>案例：字节流复制文本文件</p><img src="https://s2.loli.net/2022/02/04/x6khYR5sSU3Iy1G.jpg" style="zoom:50%;" /></li><li><p>字节流读数据（一次读一个字节数组数据）</p><img src="https://s2.loli.net/2022/02/04/BDd1xyVkIu9YZEi.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/bLPBtRp2oTGEnd8.jpg" style="zoom:50%;" /></li><li><p>案例：复制图片</p><img src="https://s2.loli.net/2022/02/04/IJsziQEvDHMLk9B.jpg" style="zoom:50%;" /></li><li><p>字节缓冲流</p><ul><li><p>BufferedOutputStream：</p><p>该类实现缓冲输出流。通过输出这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用。</p></li><li><p>BufferedInputStream：</p><p>创建BufferedInputStream将创建一个内部缓冲区数组。当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节。</p></li><li><p>构造方法</p><p>字节缓冲输出流：BufferedOutputStream(OutputStream out)</p><p>字节缓冲输入流：BufferedInputStream(InputStream in)</p><p>为什么构造方法需要的是字节流，而不是具体的文件或路径？</p><p>字节缓冲流仅仅提供缓冲区，而真正的读写数据还得依靠基本的字节流对象进行操作。</p><p><img src="https://s2.loli.net/2022/02/04/PeswRF1vEKOA7j4.jpg"></p><img src="https://s2.loli.net/2022/02/04/K7Bo3aTHWAyVzet.jpg" style="zoom:50%;" /></li></ul></li></ul></li><li><p>字符流（只能用来操作纯文本类型的文件）</p><ul><li><p>为什么会出现字符流</p><p>由于字节流操作中文不是特别方便，所以Java提供字符流。</p><p>字符流=字节流+编码表</p><p>用字节流复制文本文件时，文本文件也会有中文，但是没有出现问题，原因是最终底层操作会自动进行字节拼接成中文，如何识别是中文的呢？</p><p>汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数。</p><img src="https://s2.loli.net/2022/02/04/GIMJWZvoKNj1dzl.jpg" style="zoom:50%;" /></li><li><p>编码表</p><img src="https://s2.loli.net/2022/02/04/lh7wPuyKMjkmFIS.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/3ClcOZudi1Rjnmo.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/bugXJzVIhxk4HYQ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/er2WPVid6vHpNxS.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/rinN6sCqLeWJhM9.jpg" style="zoom:50%;" /></li><li><p>字符串中的编码解码问题</p><img src="https://s2.loli.net/2022/02/04/ijbZapvncOQM7KX.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/ojcUJhpbeQRAwx4.jpg" style="zoom:50%;" /><p>字符流抽象基类：Reader(字符输入流的抽象类)</p><p>​                                Writer(字符输出流的抽象类)</p><p>字符流中和编码问题相关的两个类：InputStreamReader,OutputStreamWriter</p><img src="https://s2.loli.net/2022/02/04/bq8XicGHMar5z3W.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/S4aXLxEjMeq28ZP.jpg" style="zoom:50%;" /></li><li><p>字符流写数据的5种方式</p><img src="https://s2.loli.net/2022/02/04/HO5jhvSJUzNk3QC.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/mnfg14zXdWGyvVp.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/pzkraR4tmJFEoeG.jpg" style="zoom:50%;" /></li><li><p>字符流读数据的2种方式</p><img src="https://s2.loli.net/2022/02/04/T1Ibo5FR8GKdnaf.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/04/YjeQ2C9zw1DTMgn.jpg" style="zoom:50%;" /></li><li><p>案例：复制文件</p><img src="https://s2.loli.net/2022/02/04/W41mt823AncrjuM.jpg" style="zoom:50%;" /><p>复制文件改进版1：</p><img src="https://s2.loli.net/2022/02/05/Jn29iwWoyQg3ZTj.jpg" style="zoom:50%;" /><p>但解决字符流编码解码问题还得用InputStreamReader和OutputStreamWriter。</p><img src="https://s2.loli.net/2022/02/05/miaBesYdZOSkXEt.jpg" style="zoom:50%;" /></li><li><p>字符缓冲流</p><img src="https://s2.loli.net/2022/02/05/9Oiqb6FHMazAmBP.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/sLHjOPIV2y4DYuW.jpg" style="zoom:50%;" /><p>复制文件改进版2：</p><p><img src="https://s2.loli.net/2022/02/05/rbVSIcumK3BihGL.jpg"></p></li><li><p>字符缓冲流特有功能</p><img src="https://s2.loli.net/2022/02/05/YhToZIv4V1HiQ6R.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/SsF6nPwAUVgojzY.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/MC5Uw94xPzqoXfB.jpg" style="zoom:50%;" /><p>复制文件改进版3(最常用)：</p><img src="https://s2.loli.net/2022/02/05/Bzx7ktqOfKrQceZ.jpg" style="zoom:50%;" /></li><li><p>IO流小结</p><img src="https://s2.loli.net/2022/02/05/9TdEeKjYgqfFAtS.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/tY3PndHJ8Mf6lNA.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/IPQlX82O3ubvRU1.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/RzTMf97YQgcO35e.jpg" style="zoom:50%;" /></li><li><p>案例：集合到文件</p><img src="https://s2.loli.net/2022/02/05/OjK64DWFSUQ5ms3.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/vBIihYdJeSK7wzP.jpg" style="zoom:50%;" /><p>改进版：</p><img src="https://s2.loli.net/2022/02/05/7HtuNySKXhZYwO1.jpg" style="zoom:50%;" /></li><li><p>案例：点名器</p><img src="https://s2.loli.net/2022/02/05/oqkbZXsQvfVxcJt.jpg" style="zoom:50%;" /></li><li><p>案例：文件到集合</p><img src="https://s2.loli.net/2022/02/05/1qKmHcuNLD6TopX.jpg" style="zoom:50%;" /></li><li><p>案例：复制单级文件夹（文件夹里只有文件，而没有文件夹）</p><img src="https://s2.loli.net/2022/02/05/dhgCxRD246UXfs9.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/wJfREkgSHbK3zWr.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/WTCNpyEbcsrjdVD.jpg" style="zoom:50%;" /></li><li></li></ul></li><li><p>特殊操作流</p><ul><li><p>标准输入输出流</p><p>System类中有两个静态的成员变量：</p><p>(1)public static final InputStream in:标准输入流。通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源。</p><p>(2)public static final PrintStream out:标准输出流。通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标。</p><p><img src="https://s2.loli.net/2022/02/05/6LgTG2MSFtbJejk.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/Ph1Ap3cbzLBs8mK.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/05/u78rqFVPtAyg62k.jpg" style="zoom:50%;" /></li><li><p>打印流</p><p>打印流的特点：只负责输出数据，不负责读取数据。</p><ul><li><p>字节打印流：PrintStream</p><p>PrintStream(String fileName):使用指定的文件名创建新的打印流</p><p>使用继承父类的方法写数据，查看的时候会转码；使用自己的特有方法写数据，查看的数据原样输出。</p><img src="https://s2.loli.net/2022/02/05/vsQaWgx5cOMfb6G.jpg" style="zoom:50%;" /></li><li><p>字符打印流：PrintWriter</p><p>构造方法：</p><img src="https://s2.loli.net/2022/02/05/KenI6pgXkJU57AD.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/05/Ca7uDpqiZAMLGVH.jpg" style="zoom:50%;" /></li><li></li></ul></li><li><p>对象序列化流</p><ul><li><p>序列化</p><p>序列化(Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。</p><img src="https://s2.loli.net/2022/02/07/hekTWR4OILAjqGy.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/07/JqfnQvNwlLjBtUX.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/07/827XugkxdSIhM4L.jpg" style="zoom:50%;" /></p></li><li><p>反序列化</p><img src="https://s2.loli.net/2022/02/07/5kZBitA1YpbCdNT.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/07/Bu4cqwZmVEKpt5i.jpg" style="zoom:50%;" /></li><li><img src="https://s2.loli.net/2022/02/07/HhZcp8xnC9dkW16.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/07/GHQUeKPys6dNOMw.jpg" style="zoom:50%;" /></li></ul></li><li><p>Properties</p><ul><li><p>概述：是一个Map体系的集合类</p><p>​            Properties可以保存到流中或从流中加载</p></li><li><p>Properties作为集合的使用：</p><img src="https://s2.loli.net/2022/02/11/CFjhaTABe6JnE9V.jpg" style="zoom:50%;" /></li><li><p>Properties作为集合的特有方法：</p><img src="https://s2.loli.net/2022/02/11/oZ8qlvQpgtVfrT6.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/EtJmyxHgc3RCz4A.jpg" style="zoom:50%;" /></li><li><p>Properties和IO流结合的方法</p><img src="https://s2.loli.net/2022/02/11/QSdjIiWvL7Z8xY3.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/11/eDwQk2nRZrFNOfV.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/d4shSwMtyPrBIz1.jpg" style="zoom:50%;" /></p></li><li><p>案例：游戏次数</p><img src="https://s2.loli.net/2022/02/11/uPzXahnSQoDfViA.jpg" style="zoom:50%;" /></li></ul></li></ul></li></ol><img src="https://s2.loli.net/2022/02/11/i5OF72mvLoyUeCa.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/jOyRniWY4cp8kzJ.jpg" style="zoom:50%;" /><h3 id="2-多线程"><a href="#2-多线程" class="headerlink" title="2.多线程"></a>2.多线程</h3><ol><li><p>实现多线程</p><ul><li><p>进程：是正在运行的程序</p><ul><li>是系统进行资源分配和调用的独立单位</li><li>每一个进程都有它自己的内存空间和系统资源</li></ul></li><li><p>线程：是进程中的单个顺序控制流，是一条执行路径</p><ul><li>单线程：一个程序如果只有一条执行路径，则称为单线程程序（记事本，不做完页面设置就无法输入文本）</li><li>多线程：一个程序如果有多条执行路径，则称为多线程程序（扫雷，同时进行扫雷游戏和计时）</li></ul></li><li><p>多线程的实现方式</p><ul><li><p>方式1：继承Thread类</p><p>(1)定义一个类MyThread继承Thread类；(2)在MyThread类中重写run()方法；(3)创建MyThread类的对象；(4)启动线程。</p><p>为什么要重写run()方法？因为run()是用来封装被线程执行的代码的。</p><p>run()方法和start()方法的区别：</p><p>run()：封装线程执行的代码，直接调用相当于普通方法的调用</p><p>start()：启动线程；然后由JVM调用此线程的run()方法</p><img src="https://s2.loli.net/2022/02/11/OD9FxyCUoYpLadr.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/rZTolgXQOpCLnf6.jpg" style="zoom:50%;" /></li><li><p>方式2：实现Runnable接口</p><p>(1)定义一个类MvRunnable实现Runnable接口；(2)在MyRunnable类中重写run()方法；(3)创建MyRunnable类的对象；(4)创建Thread类的对象，把MyRunnable对象作为构造方法的参数；(5)启动线程。</p><img src="https://s2.loli.net/2022/02/11/P4NmYf93qRQZ8Gc.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/yJ2TQdXLmbGeCtD.jpg" style="zoom:50%;" /><p>相比继承Thread类，实现Runnable接口的好处:<br>避免了Java单继承的局限性<br>适合多个相同程序的代码去处理同一个资源的情况，把线程和程序的代码、数据有效分离，较好的体现了面向对象的设计思想</p></li></ul></li><li><p>设置和获取线程名称</p><p>Thread类中设置和获取线程名称的方法：</p><ul><li><p>void setName(String name)：将此线程的名称更改为参数name</p></li><li><p>String getName()：返回此线程的名称</p></li><li><p>通过构造方法也可以设置线程名称</p></li><li><p>如何获取main0方法所在的线程名称？<br>public static Thread currentThread()：返回对当前正在执行的线程对象的引用</p><img src="https://s2.loli.net/2022/02/11/C7qwvOIVEJy4oK1.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/RsPg7ibIcw93vZE.jpg" style="zoom:50%;" /></li></ul></li><li><p>线程调度</p><img src="https://s2.loli.net/2022/02/11/yb2DAJ3NioIOxCZ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/yb2DAJ3NioIOxCZ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/62AnFcyPV5wWUMZ.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/11/TkdtErOZavczuRw.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/mgIRLdPUOfnMzJF.jpg" style="zoom:50%;" /></p></li><li><p>线程控制</p><img src="https://s2.loli.net/2022/02/11/MwKPXJYCgFBZG2e.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/L6pUg1Kyb4x95km.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/5PeisxDa6TgyrXo.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/2pPsdkTV7KJGlam.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/ilPRsnxIXfjkFK4.jpg" style="zoom:50%;" /></li><li><p>线程生命周期</p><img src="https://s2.loli.net/2022/02/11/89iZ7CvlSug2KL4.jpg" style="zoom:50%;" /></li></ul></li><li><p>线程同步</p><ul><li><p>案例：卖票</p><img src="https://s2.loli.net/2022/02/11/TDO9Zf3ugXeF41r.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/KNyus1BXxho4vif.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/kNvTmZzYtLnr2aj.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/rjwWsE1TuhHAZRn.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/p18XhaGgU2mjfZc.jpg" style="zoom:50%;" /></li><li><p>卖票案例数据安全问题的解决</p><ul><li><p>为什么出现问题？（这也是我们判断多线程程序是否会有数据安全问题的标准）<br>(1)是否是多线程环境<br>(2)是否有共享数据<br>(3)是否有多条语句操作共享数据</p></li><li><p>如何解决多线程安全问题呢？<br>基本思想：让程序没有安全问题的环境</p></li><li><p>怎么实现呢？<br>把多条语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程执行即可</p><p>Java提供了同步代码块的方式来解决</p></li><li><p>同步代码块<br>锁多条语句操作共享数据，可以使用同步代码块实现<br>格式：<br>synchronized(任意对象）{</p><p>​    多条语句操作共享数据的代码</p><p>}</p><p>synchronized(任意对象）：就相当于给代码加锁了，任意对象就可以看成是一把锁<br>同步的好处和弊端：<br>好处：解决了多线程的数据安全问题<br>弊端：当线程很多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率</p><img src="https://s2.loli.net/2022/02/11/XhmwfH6CyZquecn.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/AGWvKTC16spjN8R.jpg" style="zoom:50%;" /></li></ul></li><li><p>同步方法</p><ul><li><p>同步方法：就是把synchronized关键字加到方法上<br>格式：<br>修饰符 synchronized 返回值类型 方法名(方法参数）{}</p><p>同步方法的锁对象是this</p></li><li><p>同步静态方法：就是把svnchronized关键字加到静态方法上<br>格式：<br>修饰符 static synchronized 返回值类型 方法名（方法参数）{ }</p><p>同步静态方法的锁对象是类名.class（静态方法又称类方法，同步静态方法的默认锁就是这个类）</p><img src="https://s2.loli.net/2022/02/11/UPZugHbfCc6lryF.jpg" style="zoom:50%;" /></li></ul></li><li><p>线程安全的类</p><img src="https://s2.loli.net/2022/02/11/38xopfVOwhaEIYW.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/q5bBVdRC39WxhYZ.jpg" style="zoom:50%;" /><p>假如创建了一个StringBuilder的对象，但是有多个线程都要用这个对象，这时就应该放弃StringBuilder改用StringBuffer</p></li><li><p>Lock锁</p><img src="https://s2.loli.net/2022/02/11/CSQNrAzpyvHgZRl.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/4eswbDXNKdZnp2L.jpg" style="zoom:50%;" /></li></ul></li><li><p>生产者消费者</p><ul><li><p>生产者消费者模式概述</p><img src="https://s2.loli.net/2022/02/11/bvZSmLwqncE89aj.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/7H4APZmn9R3VE2K.jpg" style="zoom:50%;" /></li><li><p>案例：</p><img src="https://s2.loli.net/2022/02/11/EnzZxjbmHNgB4Qr.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/02/11/HvzwtTVOZaigD2G.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/gx2mKjvDedSioNP.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/11/xfoBCINGUrujcYS.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/alTzQKEOtAuFo4w.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/11/A2yTslenJPF4j8G.jpg" style="zoom:50%;" /></li></ul></li></ol><img src="https://s2.loli.net/2022/02/11/k3aMCIPXhAtOzyS.jpg" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-IO流&quot;&gt;&lt;a href=&quot;#1-IO流&quot; class=&quot;headerlink&quot; title=&quot;1.IO流&quot;&gt;&lt;/a&gt;1.IO流&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;File&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;File类概述和构造方法&lt;/p&gt;
&lt;p&gt;File：它是文</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java类与接口</title>
    <link href="http://example.com/2022/01/26/Java3/"/>
    <id>http://example.com/2022/01/26/Java3/</id>
    <published>2022-01-26T00:44:08.568Z</published>
    <updated>2022-02-03T04:36:33.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-抽象类"><a href="#1-抽象类" class="headerlink" title="1.抽象类"></a>1.抽象类</h3><ol><li><p>抽象类概述</p><p>在Java中，一个没有方法体的方法定义为抽象方法，该类必须定义为抽象类。</p><p>public abstract class Animal{</p><p>​    public abstract void eat();</p><p>}</p></li><li><p>抽象类的特点</p><ul><li>抽象类和抽象方法必须用abstract关键字修饰。</li><li>抽象类中不一定有抽象方法，可以有非抽象方法，但又抽象方法的类一定是抽象类。</li><li>抽象类不能实例化（直接创建对象），但可以参照多态的方式通过子类对象实例化，这叫抽象类多态。</li><li>抽象类的子类要么是抽象类，要么重写抽象类中的所有抽象方法。</li></ul></li><li><p>抽象类的成员特点</p><ul><li><p>成员变量</p><p>可以是变量，也可以是常量。</p></li><li><p>构造方法</p><p>有构造方法但不能实例化，其作用是用于子类访问父类数据的初始化。</p></li><li><p>成员方法</p><p>可以有抽象方法：限定子类必须完成某些动作</p><p>也可以有非抽象方法：提高代码复用性（通过继承实现）</p></li></ul></li></ol><h3 id="2-接口"><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h3><ol><li><p>接口概述</p><p>接口就是一种公共的规范标准，只要符合规范标准，大家就可以通用。</p><p>Java中的接口更多体现在对行为的抽象。</p></li><li><p>接口的特点</p><ul><li><p>接口用关键字interface修饰：public interface 接口名 {}</p></li><li><p>类实现接口用implements表示：public class 类名 implements 接口名 {}</p></li><li><p>接口不能实例化（直接创建对象），但可以参照多态的方式通过实现类对象实例化，这叫接口多态。</p><p>多态的形式：具体类多态，抽象类多态，接口多态。</p><p>多态的前提：有继承或实现关系；有方法重写；有父（类/接口）引用指向（子/实现）类对象。</p></li><li><p>接口的实现类（一般命名为接口名+Impl)要么是抽象类，要么重写接口中的所有抽象方法。</p><p><img src="https://s2.loli.net/2022/01/26/AZI9G1XbTP28oCJ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/xcWX26gsMClforV.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/26/j2K5V4CQOnwagq1.jpg" style="zoom:50%;" /></li></ul></li><li><p>接口的成员特点</p><ul><li><p>成员变量</p><p>只能是常量，默认修饰符：public static final</p><p>可以直接通过接口名调用：接口名.常量名</p></li><li><p>构造方法</p><p>接口没有构造方法，因为接口主要是对行为进行抽象的，没有具体存在。</p><p>一个类如果没有父亲，默认继承自Object类。</p></li><li><p>成员方法</p><p>只能是抽象方法，默认修饰符：public abstract  可以直接写void 方法名 ();</p></li></ul></li><li><p>案例</p><img src="https://s2.loli.net/2022/01/26/L6hNljUOQ5Xxtce.png" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/01/26/EwVB3f9YrbhSnNv.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/HGC9MpK4NouxcPj.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/26/zndpoRGh5e9bHDF.jpg" style="zoom:50%;" /></li><li><p>类和接口</p><ul><li><p>类和类的关系</p><p>继承关系，只能单继承，但是可以多层继承。</p></li><li><p>类和接口的关系</p><p>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口。</p><p>public class InterImpl extends Object implements Inter1,Inter2,Inter3{}</p></li><li><p>接口和接口的关系</p><p>继承关系，可以单继承，也可以多继承。</p><p>public interface Inter3 extends Inter1,Inter2{}</p></li><li><p>Java中多继承体现在接口。</p></li></ul></li><li><p>抽象类和接口的区别</p><img src="https://s2.loli.net/2022/01/26/2mSProqCDjyNGd5.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/rOuz5EU6WoaSgDv.jpg" style="zoom:50%;" /></li><li><p>案例</p><img src="https://s2.loli.net/2022/01/27/O9HZYfLkVAUS2cp.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/Hi2r3uRwBdjayL1.jpg" style="zoom:50%;" /></li></ol><h3 id="3-形参和返回值"><a href="#3-形参和返回值" class="headerlink" title="3.形参和返回值"></a>3.形参和返回值</h3><ol><li><p>类名作为形参和返回值</p><ul><li><p>方法的形参是类名，其实需要的是该类的对象</p></li><li><p>方法的返回值是类名，其实返回的是该类的对象</p><p><img src="https://s2.loli.net/2022/01/27/uZ2BJDXvUrklMwS.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/2CdGzosfUgPNaSe.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/27/dBDg6QC5lsrfSJx.jpg" style="zoom:50%;" /></li></ul></li><li><p>抽象类名作为形参和返回值</p><ul><li>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</li><li>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象</li></ul><p><img src="https://s2.loli.net/2022/01/27/R1ZdgeUM9Ir4tXi.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/NPFUi68MgTA1Cah.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/oRkV6N3MpShDuQA.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/8qw4Vid9lcvgrmx.jpg" style="zoom:50%;" /></p></li><li><p>接口名作为形参和返回值</p><ul><li>方法的形参是接口名，其实需要的是该接口的实现类对象</li><li>方法的返回值是接口名，其实返回的是该接口的实现类对象</li></ul><p><img src="https://s2.loli.net/2022/01/27/qkJa7A4fzmLKvSp.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/CNgwomezbp5PSFs.jpg" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2022/01/27/SjbxJIzdgUClNhQ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/Xha1Txd9cIqAlSJ.jpg" style="zoom:50%;" /></p></li></ol><h3 id="4-内部类"><a href="#4-内部类" class="headerlink" title="4.内部类"></a>4.内部类</h3><ol><li><p>内部类概述</p><p>内部类：在一个类中定义的类。</p><p>内部类的定义格式：public class 类名{</p><p>​                                        修饰符 class 类名{</p><p>​                                         }</p><p>​                                    }</p><p>内部类的访问特点：内部类可以直接访问外部类的成员，包括私有。</p><p>​                                    外部类要访问内部类的成员，必须创建对象。</p><p>按照内部类在类中定义的位置不同，可以分为如下两种形式：</p><ul><li>在类的成员位置：成员内部类</li><li>在类的局部位置：局部内部类</li></ul></li><li><p>成员内部类</p><p>外界创建内部类对象使用的格式：外部类名.内部类名 对象名 = 外部类对象.内部类对象；</p><p>范例：Outer.Inner oi = new Outer().new Inner();</p><p><img src="https://s2.loli.net/2022/01/27/syxJ6FGt9SnIM8m.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/UIKc2Nd3Cgue4tZ.jpg" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2022/01/27/rasWcnQuxBZiNkR.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/ITMlCma1k3J4Hty.jpg" style="zoom:50%;" /></p></li><li><p>局部内部类</p><p>局部内部类是在方法中定义的类，所以外部无法直接使用，需要在方法内部创建对象并使用。</p><p>该类可以直接访问外部类的成员，也可以访问方法内的局部变量。</p><p><img src="https://s2.loli.net/2022/01/27/Q4MkvO9tuzx1Krg.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/dOVrRFKX1ixzqJe.jpg" style="zoom:50%;" /></p></li><li><p>匿名内部类（局部内部类的一种特殊形式）</p><p>前提：存在一个类或者接口，这里的类可以是具体类也可以是抽象类（居多）。</p><p>格式：new 类名或接口名(){</p><p>​                        重写方法；</p><p>​            }；</p><p>本质是一个继承了该类或实现了该接口的子类匿名对象。</p><p><img src="https://s2.loli.net/2022/01/27/Opl1NuhAIoE5SQH.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/PbvprCQacI5GX6F.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/27/Nr3Uob2FGqV8fph.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/rhX6Ne1kxAPczjp.jpg" style="zoom:50%;" /></li><li><p>匿名内部类在开发中的使用</p><p><img src="https://s2.loli.net/2022/01/27/D8EZKtwVyRMIsAk.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/tVRAy5mDK6Pvh7S.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/o1cSWOw4VPGsu5L.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/27/TtRa4yAM1HUZgrJ.jpg" style="zoom:50%;" /></li></ol><h3 id="5-API"><a href="#5-API" class="headerlink" title="5.API"></a>5.API</h3><ol><li><p>Math</p><ul><li><p>Math类概述</p><p>Math包含执行基本数字运算的方法（查看帮助文档）。</p><p>没有构造方法，如何使用类中的成员呢？看类的成员是否都是静态的，如果是，通过类名就可以直接调用。</p></li><li><p>Math类的常用方法</p><img src="https://s2.loli.net/2022/01/27/DE4QhVZfoHNI2AM.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/pe4BJaw53Eq7dol.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/LE95rsxMnwpKyZ2.jpg" style="zoom:50%;" /><p>输出0~99的随机数：(int)(Math.random()*100)</p><p>输出1~100的随机数：(int)(Math.random()*100)+1</p></li></ul></li><li><p>System</p><ul><li><p>System类概述</p><p>System包含几个有用的类字段和方法，不能被实例化。</p></li><li><p>System类的常用方法</p><img src="https://s2.loli.net/2022/01/27/GdMoahKAntyNF8J.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/DZVgKSYReUWsAwz.jpg" style="zoom:50%;" /></li></ul></li><li><p>Object</p><ul><li><p>Object类的概述</p><p>Object是类层次结构的根，每个类都可以将Object作为超类。所有类都直接或者间接的继承自该类。</p><p>构造方法：public Object()</p><p>为什么子类的构造方法默认访问的是父类的无参构造方法？因为它们的顶级父类只有无参构造方法。</p></li><li><p>Object类的常用方法</p><img src="https://s2.loli.net/2022/01/27/EH3l94UwOb81BDr.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/27/ywbld4ApxKtVacq.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/01/27/45RkfMyAvVCXcYb.jpg"></p><p><img src="https://s2.loli.net/2022/01/27/W4MZUaYmODKXP62.jpg"></p><p>之前可以用equals直接比较String的原因：Java中String类中已经重写了equals方法，而这里我们自己定义的Student类则需要自己重写才可以比较s1(chen,18)和(zhang,19)是否相同。</p><p><img src="https://s2.loli.net/2022/01/28/wtYPd5qC3afjp9H.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/28/UNbTaVlr8zgcw36.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/28/kbsz45Z6H3r19Tn.jpg" style="zoom:50%;" /></li></ul></li><li><p>Arrays</p><ul><li><p>冒泡排序：一种排序的方式，对要进行排序的数据中相邻的数据进行两两比较，较大的放后面，依次对所有数据进行操作，直至所有数据按要求完成排序。</p><p>如果有n个数据进行排序，总共需要比较n-1次。</p><p>每一次比较完毕，下一次的比较就会少一个数据参与。</p><img src="https://s2.loli.net/2022/01/28/7jK4d3nVISofAUp.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/28/1RsNwViyXpSMmj8.jpg" style="zoom:50%;" /></li><li><p>Arrays类的概述和常用方法</p><p>Arrays类包含用于操作数组的各种方法。</p><img src="https://s2.loli.net/2022/01/28/Ly2HGNDjJXTxYbA.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/28/gnUkXMByj4Ocuo8.jpg" style="zoom:50%;" /></li><li><p>工具类的设计思想：</p><p>构造方法用private修饰(防止外界创建对象)；成员用public static修饰(可以使用类名来访问该方法)。</p></li></ul></li><li><p>基本类型包装类</p><ul><li><p>基本类型包装类概述</p><p>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据。</p><p>常用的操作之一：用于基本数据类型与字符串之间的转换。（String不是基本数据类型）</p><img src="https://s2.loli.net/2022/01/28/XkVf5ML3mc8aHDS.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/28/m65KSpbZwT2qalX.jpg" style="zoom:50%;" /></li><li><p>Integer类的概述和使用</p><p>Integer：包装一个对象中的原始类型int的值。</p><img src="https://s2.loli.net/2022/01/28/NqHPjRolnTJra1b.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/28/6ZCFgoDiOlhnX8L.jpg" style="zoom:50%;" /></li><li><p>int和String的相互转换</p><img src="https://s2.loli.net/2022/01/28/j8fhFyNvQKupoLi.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/28/ZWSmBlsN2v5FxtG.jpg" style="zoom:50%;" /></li><li><p>案例：字符串中数据排序</p><img src="https://s2.loli.net/2022/01/29/H3NGsi4J6cjK7Qa.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/01/29/KqHFykNMQpnfSBL.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/29/VSpFcCTuaQB76z4.jpg" style="zoom:50%;" /></p></li><li><p>自动装箱和拆箱</p><p>装箱：把基本数据类型转换为对应的包装类类型</p><p>拆箱：把包装类类型转换为对应的基本数据类型</p><img src="https://s2.loli.net/2022/01/29/bOv7tKr3m5USXZa.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/29/l2RwAdHxcnUDfm9.jpg" style="zoom:50%;" /></li></ul></li><li><p>日期类</p><ul><li><p>Date类（util包下）概述和构造方法</p><p>Date代表了一个特定的时间，精确到毫秒。</p><img src="https://s2.loli.net/2022/01/29/53yUnqajWtpXLPY.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/29/mMGj982XEUOlTwn.jpg" style="zoom:50%;" /></li><li><p>Date类的常用方法</p><img src="https://s2.loli.net/2022/01/29/odxzIyP7r5nbweG.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/29/BH4DEGAPzdtv62F.jpg" style="zoom:50%;" /></li><li><p>SimpleDateFormat类概述</p><p>SimpleDateFormat是一个具体的类，用于以区域设置敏感的方式格式化和解析日期。重点学习日期格式化和解析。</p><p>日期和时间格式由日期和时间模式字符串指定，在日期和时间模式字符串中，从’A’到’Z’以及从’a’到’z’的字母被解释为表示日期或时间字符串的组件的模式字母。</p><img src="https://s2.loli.net/2022/01/29/INrhmSV5t9YxGXy.jpg" style="zoom:50%;" /></li><li><p>SimpleDateFormat的构造方法</p><img src="https://s2.loli.net/2022/01/29/UPn3JHtho1dqpRW.jpg" style="zoom:50%;" /></li><li><p>SimpleDateFormat格式化和解析日期</p><ul><li><p>格式化(从Date到String)</p><p>public final String format(Date date)：将日期格式化成日期/时间字符串</p></li><li><p>解析(从String到Date)</p><p>public Date parse(String text,ParsePosition pos)：从给定字符串的开始解析文本以生成日期</p><img src="https://s2.loli.net/2022/01/29/vPVoFsk6AutBXIG.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/29/EedXrslywCfpRLh.jpg" style="zoom:50%;" /></li></ul></li><li><p>案例：日期工具类</p><img src="https://s2.loli.net/2022/01/30/ijPXIed4SNyco9B.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/GhykTMPlc8LYsVu.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/synUawZ6kx1pNfR.jpg" style="zoom:50%;" /></li><li><p>Calendar类概述</p><p>Calendar为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法。</p><p>Calendar提供了一个类方法getInstance用于获取Calendar对象，其日历字段已使用当前日期和时间初始化：</p><p>Calendar rightNow = Calendar.getInstance();</p><img src="https://s2.loli.net/2022/01/30/7tCVYgAr5WLQuPJ.jpg" style="zoom:50%;" /></li><li><p>Calendar类常用方法</p><img src="https://s2.loli.net/2022/01/30/sM5x9vLBGO7K4ja.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/u1QIarg8cMAVBYl.jpg" style="zoom:50%;" /></li><li><p>案例：二月天</p><img src="https://s2.loli.net/2022/01/30/9ZmdKOoPNUb8AaX.jpg" style="zoom:50%;" /></li></ul></li></ol><h3 id="6-异常"><a href="#6-异常" class="headerlink" title="6.异常"></a>6.异常</h3><ol><li><p>异常概述</p><p>异常：就是程序出现了不正常的情况。</p><img src="https://s2.loli.net/2022/01/30/Ab7cdxgYIZnEy3S.jpg" style="zoom:50%;" /></li><li><p>JVM的默认处理方案</p><p>如果程序出现了问题，我们没有做任何处理，最终JVM会做默认的处理：</p><p>把异常的名称，异常原因以及异常出现的位置等信息输出在了控制台。</p><p>程序停止运行。</p><img src="https://s2.loli.net/2022/01/30/awUrygtDTE1m4co.jpg" style="zoom:50%;" /></li><li><p>异常处理</p><p>如果程序出现了异常，我们需要自己来处理，有两种方案：</p><p>try···catch···</p><p>throws</p></li><li><p>try···catch···</p><img src="https://s2.loli.net/2022/01/30/d57nQIPgZUJTlyi.jpg" style="zoom:50%;" /><p>如果try抛出的异常和catch中的异常类对象不匹配，程序会直接终止。</p><p>可以直接什么异常都不管，直接写Exception。</p><img src="https://s2.loli.net/2022/01/30/YpZIx8Fyfg3cXl6.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/hd4IbvckWrCM3eT.jpg" style="zoom:50%;" /></li><li><p>Throwable的成员方法</p><img src="https://s2.loli.net/2022/01/30/6wdIc8BDQ1pmoSr.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/CeyNIg9fl7UXLt3.jpg" style="zoom:50%;" /></li><li><p>编译时异常和运行时异常的区别</p><p>Java中的异常被分为两大类：编译时异常和运行时异常，也被称为受检异常和非受检异常。</p><p>所有的RuntimeException类及其子类被称为运行时异常，其他的异常都是编译时异常。</p><p>编译时异常：必须显示处理，否则程序就会发生错误，无法通过编译（可能有问题，try···catch···处理后也可能可以正常运行）</p><p>运行时异常：无需显示处理，也可以和编译时异常一样处理</p></li><li><p>throws</p><img src="https://s2.loli.net/2022/01/30/k6yumTSHKbvnJZs.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/LKr7MCEnUFATws8.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/JnKHwjgPyZeDNSX.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/VAmPzD5lgfynQoc.jpg" style="zoom:50%;" /></li><li><p>自定义异常</p><img src="https://s2.loli.net/2022/01/30/n6SY4PFLyWl7DNB.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/8GdxKhvX7afL1tN.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/01/30/egp9yjhxrfDtW1Z.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/mlBGvxu5a2CP3wr.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/30/cmzYRx1dqFNr3vO.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/k89b7XCZz6VilTe.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/y9DW4d1YewZXO6s.jpg" style="zoom:50%;" /></li></ol><h3 id="7-集合进阶"><a href="#7-集合进阶" class="headerlink" title="7.集合进阶"></a>7.集合进阶</h3><ol><li><p>Collection</p><p>集合：提供一种存储空间可变的存储模型，存储的数据容量可以随时发生改变。</p><img src="https://s2.loli.net/2022/01/30/OcIvsNmMjiBgKDl.jpg" style="zoom:50%;" /><p>Collection集合概述：是单例集合的顶层接口，它表示一组对象，这些对象也称为Collection的元素</p><p>​                                    JDK不提供此接口的任何直接实现，它提供更具体的子接口(如Set和List)实现</p><p>创建Collection集合的对象：(1)多态的方式；(2)具体的实现类ArrayList</p><img src="https://s2.loli.net/2022/01/30/8w3r12yuasDOejq.jpg" style="zoom:50%;" /><p>ArrayList集合中重写了toString方法。</p><p>Collection集合常用方法：</p><img src="https://s2.loli.net/2022/01/30/VKrtswm3LcDSyif.jpg" style="zoom:50%;" /><p>双击选中，先Ctrl+B再Alt+7：打开一个窗口，能够看到类的所有信息。</p><p>Collection集合的遍历：</p><img src="https://s2.loli.net/2022/01/30/5t3szKLW4yA6rP9.jpg" style="zoom:50%;" /><p>（迭代器是一个接口，用多态的方式创建对象)</p><img src="https://s2.loli.net/2022/01/30/Lcfnj1psIJrRaoK.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/miQeU4z1FftZqOM.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/w2EUov9jgXfiFDC.jpg" style="zoom:50%;" /></li><li><p>List</p><ul><li><p>List集合概述：</p><p>有序集合（也称为序列），用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素并搜索列表中的元素。</p><p>与Set集合不同，列表通常允许重复的元素。</p></li><li><p>List集合特点：有序、可重复</p><img src="https://s2.loli.net/2022/01/30/DgTQISuaoKWtJBc.jpg" style="zoom:50%;" /></li><li><p>List集合特有（Collection没有）方法：</p><img src="https://s2.loli.net/2022/01/30/7zHwvSnyYAFdoTG.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/txnVrqY91LRgdym.jpg" style="zoom:50%;" /></li><li><p>并发修改异常（ConcurrentModificationException）</p><p>产生原因：迭代器遍历的过程中，通过集合对象修改了集合中元素的长度，造成了迭代器获取元素中判断预期修改值和实际修改值不一致。</p><p>解决方案：用for循环遍历，然后用集合对象做对应的操作即可。</p><img src="https://s2.loli.net/2022/01/30/kBchQvlLr76Aq1t.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/SQRVftAgCnhKG7B.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/30/AtlNCRsDzfgmMne.jpg" style="zoom:50%;" /></li><li><p>Listlterator:列表迭代器</p><p>通过List集合的listlterator()方法得到，是List集合特有的迭代器。</p><p>允许沿任一方向遍历列表、在迭代期间修改列表，并获取列表中迭代器的当前位置。</p></li><li><p>Listlterator中的常用方法</p><p>E next(): 返回迭代中的下一个元素</p><p>boolean hasNext(): 如果迭代具有更多元素，则返回true</p><p>E previous(): 返回列表中的上一个元素</p><p>boolean hasPrevious(): 如果此列表在相反方向遍历时具有更多元素，则返回true</p><p>void add(E e): 将指定的元素插入列表</p><img src="https://s2.loli.net/2022/01/31/uDSYUr7ZLGEq9Td.jpg" style="zoom:50%;" /></li><li><p>增强for循环（简化数组和Collection集合的遍历）</p><p>实现Iterable接口的类允许其对象成为增强型for语句的目标。</p><p>其内部原理是一个Iterator迭代器。</p><p>格式：</p><p>for(元素数据类型 变量名：数组或者Collection集合){</p><p>​        //在此处使用变量即可，该变量就是元素</p><p>}</p><img src="https://s2.loli.net/2022/01/31/W9MO5A6msfpdEgo.jpg" style="zoom:50%;" /></li><li><p>数据结构</p><p>数据结构是计算机存储、组织数据的方式。是指相互之间存在一种或多种特定关系的数据元素的集合。</p><p>通常情况下，精心选择的数据结构可以带来更高的运行或存储效率。</p><img src="https://s2.loli.net/2022/01/31/TKgq7vL5AGlE3Yr.jpg" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/01/31/QTvNZDlOi7RbqHe.jpg" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/01/31/kam3TlRo8IQ7bLC.jpg" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/01/31/4ejPbKfWT3NIGwn.jpg" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/01/31/gLO7lTFpRU1ntfG.jpg" style="zoom:33%;" /><img src="https://s2.loli.net/2022/01/31/YPfLoJhMINtTKkg.jpg" style="zoom:33%;" /><img src="https://s2.loli.net/2022/01/31/krzCTwXjBLRNoEl.jpg" style="zoom:33%;" /><img src="https://s2.loli.net/2022/01/31/QlKzjIM85AXWpVR.jpg" style="zoom:33%;" /></li><li><p>List集合子类特点</p><p>List集合常用子类：ArrayList（底层数据结构是数组，查询快，增删慢）</p><p>​                                LinkedList（底层数据结构是链表，查询慢，增删快）</p></li><li><p>LinkedList集合的特有功能</p><img src="https://s2.loli.net/2022/01/31/PIiF8eqaBxp3bjH.jpg" style="zoom:50%;" /></li></ul></li><li><p>Set</p><ul><li><p>Set集合特点</p><p>不包含重复元素；</p><p>没有带索引的方法，所以不能使用普通for循环遍历。</p><img src="https://s2.loli.net/2022/01/31/5uAUIFdRXsmoVMH.jpg" style="zoom:50%;" /></li><li><p>哈希值：</p><p>是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值。</p><p>Object类中有一个方法可以获取对象的哈希值：public int hashCode()</p><p>对象的哈希值特点：同一个对象多次调用hashCode()方法返回的哈希值相同</p><p>​                                    默认情况下，不同对象的哈希值不同，而重写hashCode()方法可以实现让不同对象的哈希值相同</p></li><li><p>HashSet集合概述和特点</p><p>底层数据结构是哈希表。</p><p>对集合的迭代顺序不作任何保证，也就是说不保证存储和取出的元素顺序一致。</p><p>没有带索引的方法，所以不能使用普通for循环遍历。</p><p>用于是Set集合，所以是不包含重复元素的集合。</p><img src="https://s2.loli.net/2022/01/31/fvA4lTo7zeLSHgQ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/31/gIrU4VGOlEznHit.jpg" style="zoom:33%;" /><p>JDK8之前，底层采用数组+链表实现，可以说是一个元素为链表的数组。</p><p>JDK8以后，在长度比较长时底层实现了优化。</p><p><img src="https://s2.loli.net/2022/01/31/GlshEgpkJtfa7QI.jpg"></p></li><li><p>LinkedHashSet集合概述和特点</p><p>哈希表和链表实现的Set接口，具有可预测的迭代次序</p><p>由链表保证元素有序，也就是说元素的存储和取出顺序是一致的</p><p>由哈希表保证元素唯一，也就是说没有重复的元素</p></li><li><p>TreeSet集合概述和特点</p><p>元素有序，这里的顺序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体排序方式取决于构造方法。</p><p>TreeSet(): 根据其元素的自然排序进行排序</p><p>TreeSet(Comparator comparator): 根据指定的比较器进行排序</p><p>没有带索引的方法，所以不能使用普通for循环遍历。</p><p>由于是Set集合，所以不包含重复元素的集合。</p><img src="https://s2.loli.net/2022/02/01/uq4AsbQcayrofNH.jpg" style="zoom:50%;" /></li><li><p>自然排序Comparable的使用</p><p>案例：存储学生对象并遍历，创建TreeSet集合使用无参构造方法。要求按照年龄从小到大排序，年龄相同时按照姓名的字母顺序排序。</p><p><img src="https://s2.loli.net/2022/02/02/TlaXoIbVGKO4rHc.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/Dan2VtJEH1fvWq5.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/02/pFSWJ2My7lnYbrC.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/kzKNjCYlIWRy8Us.jpg" style="zoom:50%;" /></li><li><p>比较器Comparator的使用</p><img src="https://s2.loli.net/2022/02/02/tCxPTWEfdwBMUj3.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/pGBfN7yamuIU4Dw.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/4mzro6vH1RKfFVn.jpg" style="zoom:50%;" /></li><li><p>案例：不重复的随机数</p><img src="https://s2.loli.net/2022/02/02/eTpnjiaIxYRqNsZ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/78VZC6yLgY3sJn2.jpg" style="zoom:50%;" /></li></ul></li><li><p>泛型</p><p>提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型。</p><p>它的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><p>参数化类型怎么理解？顾名思义，就是将类型由原来的具体的类型参数化，然后在使用/调用时传入具体的类型。</p><p>这种参数类型可以用在类、方法和接口中，分别被称为泛型类、泛型方法、泛型接口。</p><ul><li><p>泛型定义格式</p><p>&lt;类型&gt;：指定一种类型的格式。这里的类型可以看成是形参。</p><p>&lt;类型1，类型2···&gt;：指定多种类型的格式。这里的类型可以看成是形参。</p><p>将来具体调用时给定的类型可以看成是实参，并且实参的类型只能是引用数据类型。</p><img src="https://s2.loli.net/2022/02/02/9buqwcWHPrO3Ba6.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/tI9eKU1d4fjDg8z.jpg" style="zoom:50%;" /></li><li><p>泛型的好处</p><p>把运行时期的问题提前到了编译期间。</p><p>避免了强制类型转换。</p></li><li><p>泛型类</p><p>泛型类的定义格式：修饰符 class 类名 &lt;类型&gt;{ }</p><p>范例：public class Generic&lt; T&gt;{ }    此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。</p><p><img src="https://s2.loli.net/2022/02/02/iVMCD9WZfFYjbSJ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/s7gyGKkdHROp4Cw.jpg" style="zoom:50%;" /></p></li><li><p>泛型方法</p><p>泛型方法的定义格式：修饰符 &lt;类型&gt; 返回值类型 方法名(类型 变量名){ }</p><p>范例：public &lt; T&gt; void show(T t){ }</p><p><img src="https://s2.loli.net/2022/02/02/8rHglskoE6RpZXW.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/DfU6sdTQEwceFKt.jpg" style="zoom:50%;" /></p></li><li><p>泛型接口</p><p>泛型接口的定义格式：修饰符 interface 接口名&lt;类型&gt;{ }</p><p>范例：public interface Generic&lt; T&gt;{ }</p><p><img src="https://s2.loli.net/2022/02/02/VhHwN3YInpJUAcb.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/JU1Z43LSQ2DrGxO.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/02/02/2VTeP6mWLcHD4NR.jpg" style="zoom:50%;" /></li><li><p>类型通配符</p><p>为了表示各种泛型List的父类，可以使用类型通配符。</p><p>类型通配符：&lt;?&gt;</p><p>List&lt;?&gt;：表示元素类型未知的List，它的元素可以匹配任何类型</p><p>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中。</p><p>如果只希望它代表某一类泛型List的父类，可以使用类型通配符的上限。</p><p>类型通配符上限：&lt;?extends类型&gt;</p><p>List&lt;?extends Number&gt;：它表示的类型是Number或者其子类型</p><p>类似的，可以指定类型通配符的下限。</p><p>类型通配符下限：&lt;?super类型&gt;</p><p>List&lt;?super Number&gt;：它表示的类型是Number或者其父类型</p><img src="https://s2.loli.net/2022/02/02/tJhbFraKvs5le1O.jpg" style="zoom:50%;" /></li><li><p>可变参数</p><p>可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的了。</p><p>格式：修饰符 返回值类型 方法名(数据类型···变量名){ }</p><p>范例：public static int sum(int···a){ }</p><img src="https://s2.loli.net/2022/02/02/7VU9SMwvDCkdP5F.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/yFJp6H1WsCXczMY.jpg" style="zoom:50%;" /></li><li><p>可变参数的使用</p><p>Arrays工具类中有一个静态方法：</p><p>public static &lt; T&gt; List&lt; T&gt; asList(T···a)：返回由指定数组支持的固定大小的列表</p><p>不能增删，可修改。</p><p>List接口中有一个静态方法：</p><p>public static &lt; E&gt; List&lt; E&gt; of(E···elements)：返回包含任意数量元素的不可变列表</p><p>不能增删改。</p><p>Set接口中有一个静态方法：</p><p>public static &lt; E&gt; Set&lt; E&gt; of(E···elements)：返回一个包含任意数量元素的不可变集合</p><p>不能给重复元素，不能增删，没有修改的方法。</p><img src="https://s2.loli.net/2022/02/02/6p7Ex3MOlQCc9ag.jpg" style="zoom:50%;" /></li></ul></li><li><p>Map</p><ul><li><p>Map集合概述</p><p>Interface Map&lt;K,V&gt;   K: 键的类型 ; V: 值的类型</p><p>将键映射到值的对象；不能包含重复的键；每个键可以映射到最多一个值。</p><p>创建Map集合的对象：(1)多态的方式；(2)具体的实现类HashMap</p><img src="https://s2.loli.net/2022/02/02/IO9kFwX3PgmAya2.jpg" style="zoom:50%;" /></li><li><p>Map集合的基本功能</p><img src="https://s2.loli.net/2022/02/02/Ua3lvC1AxGbJPV9.jpg" style="zoom:50%;" /></li><li><p>Map集合的获取功能</p><img src="https://s2.loli.net/2022/02/02/4zfwCNBt8gyWabm.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/WQsZF5gfBSTbwYa.jpg" style="zoom:50%;" /></li><li><p>Map集合的遍历</p><ul><li><p>方法1</p><p>(1)获取所有的键的集合。用keySet()方法实现</p><p>(2)遍历键的集合，获取到每一个键。用增强for实现</p><p>(3)根据键去找值。用get(Object key)方法实现</p><img src="https://s2.loli.net/2022/02/02/4mKvjXD72WMNrY9.jpg" style="zoom:50%;" /></li><li><p>方法2</p><p>(1)获取所有键值对对象的集合</p><p>​    Set&lt;Map.Entry&lt;K,V&gt;&gt;entrySet()：获取所有键值对对象的集合</p><p>(2)遍历键值对对象的集合，得到每一个键值对对象</p><p>​    用增强for实现，得到每一个Map.Entry</p><p>(3)根据键值对对象获取键和值</p><p>​    用getKey()得到键</p><p>​    用getValue()得到值</p><img src="https://s2.loli.net/2022/02/02/3Up4Kf7JYjkdHPC.jpg" style="zoom:50%;" /><p>Ctrl+Alt+V自动生成左边。</p></li></ul></li><li><p>案例：HashMap集合存储学生对象并遍历</p><img src="https://s2.loli.net/2022/02/02/NulJHXQ9aU3VG5T.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/a8Fguy3wohJkrYe.jpg" style="zoom:50%;" /></li><li><p>ArrayList集合存储HashMap元素并遍历</p><p>创建一个ArrayList集合，存储三个元素，每一个元素都是HashMap,每一个HashMap的键和值都是String，并遍历。</p><p><img src="https://s2.loli.net/2022/02/02/nIPwk7e6HopZrY8.jpg"><img src="https://s2.loli.net/2022/02/02/UFKGfzon8sI5m31.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/ADRuFUjrQlVey4c.jpg" style="zoom:50%;" /></p></li><li><p>HashMap集合存储ArrayList元素并遍历</p><p>创建一个HashMap集合，存储三个键值对元素，每一个键值对元素的键是String，值是ArrayList，每一个ArrayList的元素是String，并遍历。</p><p><img src="https://s2.loli.net/2022/02/02/AdBgh2nRVcYUE1x.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/Y4kOP2whAd7XcpL.jpg" style="zoom:50%;" /></p></li><li><p>案例：统计字符串中每个字符出现次数</p><img src="https://s2.loli.net/2022/02/02/cnN7VkLqtBo2G8z.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/w3K4rA2SOPFGTWp.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/02/HrVWGIpAnFoLivx.jpg" style="zoom:50%;" /><p>TreeMap可以实现排序。重新存储的过程是替换。</p><img src="https://s2.loli.net/2022/02/02/vHELBAzXF2uRbJC.jpg" style="zoom:50%;" /></li></ul></li><li><p>Collections</p><ul><li><p>Collections概述和使用</p><p>Collections类是针对集合操作的工具类。</p><p>常用方法：</p><p>public static &lt;T extends Comparable&lt;?super T&gt;&gt; void sort(List &lt; T&gt; list)：将指定的列表按升序排序</p><p>public static void reverse(List&lt;?&gt; list)：反转指定列表中元素的顺序</p><p>public static void shuffle(List&lt;?&gt; list)：使用默认的随机源随机排列指定的列表</p><img src="https://s2.loli.net/2022/02/02/PWOnEvZcNsSi1aC.jpg" style="zoom:50%;" /></li><li><p>ArrayList存储学生对象并排序</p><p>要求：按照年龄从小到大排序，年龄相同时按照姓名的字母顺序排序。</p><img src="https://s2.loli.net/2022/02/03/5KasbCg6mdXxolp.jpg" style="zoom:50%;" /><p>也可以让学生类实现自然排序接口。</p></li><li><p>案例：斗地主</p><img src="https://s2.loli.net/2022/02/03/HBtdnbgaAwsTL54.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/03/G7gebfOqKhQAYtJ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/03/aDwthoIkiS1mYvP.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/03/af9EHls4nXkDC73.jpg" style="zoom:50%;" /><p>升级版：</p><img src="https://s2.loli.net/2022/02/03/1BONfDoks9rjZF8.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/03/DAvotxlQeEIZfOy.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/02/03/IdnN7QMaBGRwZpk.jpg" style="zoom: 50%;" /><img src="https://s2.loli.net/2022/02/03/QWsNXxCIEngqvG7.jpg" style="zoom:50%;" /></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-抽象类&quot;&gt;&lt;a href=&quot;#1-抽象类&quot; class=&quot;headerlink&quot; title=&quot;1.抽象类&quot;&gt;&lt;/a&gt;1.抽象类&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;抽象类概述&lt;/p&gt;
&lt;p&gt;在Java中，一个没有方法体的方法定义为抽象方法，该类必须定义为抽象类。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java面向对象</title>
    <link href="http://example.com/2022/01/21/Java2/"/>
    <id>http://example.com/2022/01/21/Java2/</id>
    <published>2022-01-21T02:24:48.921Z</published>
    <updated>2022-01-25T18:08:26.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-面向对象基础"><a href="#1-面向对象基础" class="headerlink" title="1.面向对象基础"></a>1.面向对象基础</h3><ol><li><p>类和对象</p><ul><li><p>对象</p><p>万物皆对象，客观存在的事物皆为对象。（计算机中对象是具体的数据信息）</p></li><li><p>面向对象(行为化)</p><p>面向对象是把整个需求按照特点、功能划分，将这些存在共性的部分封装成类(类实例化后才是对象)，创建对象不是为了完成某一个步骤，而是描述某个事物在解决问题的步骤中的行为。<img src="https://s2.loli.net/2022/01/21/minu1C72ce9MvDt.jpg" style="zoom:50%;" /></p><p>面向过程(步骤化)</p><p>面向过程就是分析出实现需求所需要的步骤，通过方法一步一步实现这些步骤，接着依次调用。</p></li><li><p>类</p><p>类是对现实生活中一类具有共同属性和行为的事物的抽象，确定对象将会拥有的属性和行为。是Java程序的基本组成单位。</p></li><li><p>类的特点</p><p>类是对象的数据类型。</p><p>类是具有相同属性和行为的一组对象的集合。</p></li><li><p>对象的属性和行为</p><p>属性：对象具有的各种特征，每个对象的每个属性都拥有特定的值。</p><p>行为：对象能够执行的操作。<img src="https://s2.loli.net/2022/01/21/2hS5v6Hp3lDU4zP.jpg" style="zoom: 50%;" /></p></li><li><p>类和对象的关系</p><p>类是对象的抽象，对象是类的实体。</p></li><li><p>类的组成：属性和行为</p><p>属性：在类中通过成员变量来体现(类中方法外的变量)</p><p>行为：在类中通过成员方法来体现(和前面的方法相比去掉static关键字即可)</p></li><li><p>类的定义</p><p><img src="https://s2.loli.net/2022/01/21/zKL8DBpw1CtNqWy.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/Kr5EQkShYd1sIoD.jpg" style="zoom:50%;" /></p></li><li><p>对象的使用</p><p><img src="https://s2.loli.net/2022/01/21/miwpG9rLdFZut7A.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/AELsX5PDQH36n8N.jpg" style="zoom:50%;" /></p></li></ul></li><li><p>对象内存图</p><ul><li><p>单个对象</p><p><img src="https://s2.loli.net/2022/01/21/GoB6MtAlNmL5FTO.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/mf4IJLknZAwY6MS.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/gIw5AMhuplymb6z.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/5dgTA3pGnWUEJeO.jpg" style="zoom:50%;" /></p></li><li><p>多个对象</p><p>方法可共用，成员变量值不同。<img src="https://s2.loli.net/2022/01/21/WVH8iRghzxYOLCQ.jpg" style="zoom:50%;" /></p></li><li><p>多个对象指向相同</p><p>一个对象修改了堆内存的内容，另一个对象去访问时内容也被修改。<img src="https://s2.loli.net/2022/01/21/zrc1LTCBmdt26nb.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/EXvneCJwFrU5Qqp.jpg" style="zoom:50%;" /></p></li></ul></li><li><p>成员变量和局部变量</p><p><img src="https://s2.loli.net/2022/01/21/PKshN6CpwYE8OGF.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/bXUZ8WVeG92ptYm.jpg" style="zoom: 50%;" /></p></li><li><p>封装</p><ul><li><p>通过对象名直接访问成员变量的这种方式存在数据安全隐患。</p><img src="https://s2.loli.net/2022/01/21/3ZnCRDxlATH6t1w.jpg" style="zoom:50%;" /></li><li><p>private关键字——例：private int age；</p><ul><li><p>是一个权限修饰符</p></li><li><p>可以修饰成员（成员变量和成员方法）</p></li><li><p>作用是保护成员不被别的类使用，被private修饰的成员只在本类中才能访问</p></li><li><p>针对private修饰的成员变量，如果需要被其他类使用要提供相应的操作：</p><p>提供”get变量名()”方法，用于获取成员变量的值，方法用public修饰；</p><p>public int getAge(){</p><p>​    return age;</p><p>}</p><p>提供”set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰；</p><p>public void setAge(int a){</p><p>​    age=a;</p><p>}</p><p>方法中可以给参数加限制条件以判断其合理性。</p><p>使用：s.setAge(30);</p><img src="https://s2.loli.net/2022/01/21/HILFro7BQPi92yg.jpg" style="zoom:50%;" /></li></ul><img src="https://s2.loli.net/2022/01/21/tL1ilnPah3TUGFD.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/srC2K5odx1MT3cL.jpg" style="zoom:50%;" /></li><li><p>private关键字的使用</p><ul><li>把成员变量用private修饰</li><li>提供对应的getXxx()/setXxx()方法</li></ul></li><li><p>this关键字</p><ul><li><p>this修饰的变量用于指代成员变量</p><img src="https://s2.loli.net/2022/01/22/o3g6aTpLhjyJQVx.jpg" style="zoom:50%;" /></li><li><p>解决局部变量隐藏成员变量时用this</p></li><li><p>方法被哪个对象调用，this就代表哪个对象</p></li><li><p>this内存原理</p><p><img src="https://s2.loli.net/2022/01/22/zopvVH3mLEfcikw.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/22/SLuxcOEIg68qVeB.jpg" style="zoom:50%;" /></p></li></ul></li><li><p>封装</p><ul><li><p>封装概述</p><p>是面向对象三大特征之一（封装，继承，多态）。</p><p>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作。</p></li><li><p>封装原则</p><p>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问成员变量private，提供对应的getXxx()/setXxx()方法。</p></li><li><p>封装好处</p><p>通过方法来控制成员变量的操作，提高了代码的安全性。</p><p>把代码用方法进行封装，提高了代码的复用性。</p></li></ul></li></ul></li><li><p>构造方法</p><ul><li><p>构造方法是一种特殊的方法</p><p>作用：创建对象，且可以实现直接赋值</p><p>功能：主要是完成对象数据的初始化</p><p>格式：修饰符 类名(参数){</p><p>​            }</p><p>​            修饰符一般用public</p><p><img src="https://s2.loli.net/2022/01/22/HiVmoNrbGO5n7Rt.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/22/6KmuL9exs8AqRUk.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/22/tQ7bwG3APDBrz91.jpg" style="zoom:50%;" /></li><li><p>注意事项：</p><ul><li><p>构造方法的创建：</p><p>如果没有定义构造方法，系统将给出一个默认的无参数构造方法。</p><p>如果定义了构造方法，系统将不再提供默认的构造方法。</p></li><li><p>构造方法的重载：</p><p>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法。</p></li><li><p>推荐的使用方式：</p><p>无论是否使用，都手写无参数构造方法。</p><img src="https://s2.loli.net/2022/01/22/mNvBocC8Xh6R7Zl.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/01/22/LVRgFADzQ7m1f4I.jpg"></p></li></ul></li></ul></li></ol><h3 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h3><ol><li><p>API</p><ul><li><p>API概述</p><img src="https://s2.loli.net/2022/01/22/UWL9fS1VotBmlOK.jpg" style="zoom:50%;" /></li><li><p>如何使用帮助文档</p><p>右键打开/双击打开—找到索引下的搜索框—输入Random回车—看Random类在哪个包下(软件包：java.util)如果是java.lang则不需要导包—往下，看类的描述信息(知道它用来干什么)—看构造方法—看成员方法(返回值，方法名，参数，描述信息)</p><p><img src="https://s2.loli.net/2022/01/22/NipXy5nj7W4HfZ8.jpg"></p></li></ul></li><li><p>String</p><ul><li><p>String概述</p><img src="https://s2.loli.net/2022/01/22/abR4FgGHteYdZnN.jpg" style="zoom:50%;" /></li><li><p>String构造方法</p><img src="https://s2.loli.net/2022/01/22/WBS26bZ3FfV4xpP.jpg" style="zoom:50%;" /></li></ul><img src="https://s2.loli.net/2022/01/22/ygcPQhS4fIAOGkY.jpg" style="zoom:50%;" /><ul><li>String对象的特点</li></ul><img src="https://s2.loli.net/2022/01/22/uOBdlILmEJXF8v4.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/22/xmrRi8hyj4UuN1X.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/22/5lb2siZHtU7TI8k.jpg" style="zoom:50%;" /><ul><li><p>字符串的比较</p><ul><li><p>使用==作比较</p><p>基本类型：比较数据值</p><p>引用类型：比较地址值</p></li><li><p>字符串是对象，通过equals()方法比较内容是否相同</p><p>public boolean equals(Object anObject)</p><p>使用范例：System.out.println(s1.equals(s2));</p></li><li><p>案例：用户登录</p><img src="https://s2.loli.net/2022/01/22/gOqNTb1DLCZYMjI.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/22/3IfC4NwP8JcljRo.jpg" style="zoom:50%;" /></li></ul></li><li><p>遍历字符串</p><img src="https://s2.loli.net/2022/01/22/Y2XfWFNgRPL1q6S.jpg" style="zoom:50%;" /><p>char ch = s.charAt(i);</p><p>倒着遍历时是i–。</p><img src="https://s2.loli.net/2022/01/23/rgH3ouGQaSs4PWY.png" style="zoom:50%;" /></li></ul></li><li><p>StringBuilder</p><ul><li><p>StringBuilder概述</p><img src="https://s2.loli.net/2022/01/23/9nOxWVbQcasgJGB.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/DMfp2qSTI9cwFla.jpg" style="zoom:50%;" /><p>StringBuilder是一个可变的字符串类（可变指StringBuilder对象中的内容可变，而String对象中内容不可变），可以把它看成一个容器。</p></li><li><p>StringBuilder构造方法</p><img src="https://s2.loli.net/2022/01/23/3KeC6MaTJfjFDSn.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/shldIqypKUtnkST.jpg" style="zoom:50%;" /></li><li><p>StringBuilder的添加和反转方法</p><img src="https://s2.loli.net/2022/01/23/S2taWEYblRvXkdj.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/wiFDjAPeod8Wg7J.jpg" style="zoom:50%;" /></li><li><p>StringBuilder和String相互转换</p><ul><li><p>StringBuilder转换为String</p><p>public String toString():通过toString实现</p></li><li><p>String转换为StringBuilder</p><p>public StringBuilder(String s):通过构造方法实现</p><img src="https://s2.loli.net/2022/01/23/l9aGjXV5fpYc6nU.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/PxYDKj8OH13Wyl9.jpg" style="zoom:50%;" /></li></ul></li></ul></li></ol><h3 id="3-集合基础"><a href="#3-集合基础" class="headerlink" title="3.集合基础"></a>3.集合基础</h3><ol><li><p>集合概述</p><p>数组长度固定且不动态化。</p><p>集合类的特点：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变。</p><p>ArrayList&lt; E&gt;:可调整大小的数组实现</p><p>​                        &lt; E&gt;是一种特殊的数据类型，泛型</p><p>怎么用？在出现E的地方使用数据类型替换即可。例：ArrayList&lt; String&gt;,ArrayList&lt; Student&gt;</p></li><li><p>ArrayList构造方法和添加方法（需要导包）</p><img src="https://s2.loli.net/2022/01/23/wP5QaOvoAZzWhnl.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/2fuSrXh9HvCnegR.jpg" style="zoom:50%;" /></li><li><p>ArrayList常用方法</p><img src="https://s2.loli.net/2022/01/23/QM4gFnrU8ib7Zzf.jpg" style="zoom:50%;" /></li><li><p>遍历集合通用格式</p><img src="https://s2.loli.net/2022/01/23/HBlIfdQNcgxeVSa.jpg" style="zoom:50%;" /></li><li><p>案例</p></li></ol><p><img src="https://s2.loli.net/2022/01/23/4s5yhvDgrFbAe9T.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/Cms8jLXTNOcGinl.jpg" style="zoom:50%;" /></p><p>升级版：</p><p><img src="https://s2.loli.net/2022/01/23/97jfXZsiFu2To4p.png" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/01/23/5Ux7Tuj8gdpI3Z9.png" style="zoom: 25%;" /></p><p>快捷键：Alt+Fn+Insert 生成构造和get、set方法</p><p>​                构造方法 Constructor：第一个，无参构造 ； 用Shift可以全选下面所有，带参构造。</p><p>​                get和set方法 Getter and Setter</p><p>\t 其实就是Tab键的位置，要用”“括起来</p><p>System.exit(0);  JVM退出</p><p>集合中无信息时，array.size()=0</p><p>方法中让程序不再往下执行可以直接添加return;</p><h3 id="4-继承"><a href="#4-继承" class="headerlink" title="4.继承"></a>4.继承</h3><ol><li><p>继承概述</p><img src="https://s2.loli.net/2022/01/24/HfkyDQTA3sSxZdc.jpg" style="zoom: 33%;" /><p>继承是面向对象三大特征之一。可以使得子类（派生类）具有父类（基类、超类）的属性和方法，还可以在子类中重新定义、追加属性和方法。</p><p>格式：public class 子类名 extends 父类名{ }</p><p>继承中子类的特点：(1)子类可以有父类的内容；(2)子类还可以有自己的内容。</p></li><li><p>继承的好处和弊端</p><ul><li><p>好处：</p><p>提高代码复用性（多个类中相同的成员可以放到一个类中）</p><p>提高了代码的维护性（如果方法的代码需要修改，改一处即可）</p></li><li><p>弊端：</p><p>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类不得不跟着变化，削弱了子类的独立性</p></li><li><p>什么时候用继承</p><p>如果满足A类是B类的一种就用继承</p></li></ul></li><li><p>继承中变量的访问特点</p><p>在子类方法中访问一个变量：(1)子类局部范围（该方法里）找；(2)子类成员范围找；(3)父类成员范围找；(4)如果都没有就报错（不考虑父亲的父亲···）。</p><p>遵循就近原则。</p></li><li><p>super</p><img src="https://s2.loli.net/2022/01/25/9RNbcv3dnwiW8oQ.jpg" style="zoom:50%;" /></li><li><p>继承中构造方法的访问特点</p><img src="https://s2.loli.net/2022/01/25/6eKYo92Ht1ZAq5y.jpg" style="zoom:67%;" /><p><img src="https://s2.loli.net/2022/01/25/ukXGUpghm7YcIoe.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/xviSWd6YM3DV82w.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/25/3Kfub9UOd7GQrso.jpg" style="zoom:67%;" /></li><li><p>继承中成员方法的访问特点</p><p>通过子类对象访问一个方法：(1)子类成员范围找；(2)父类成员范围找；(3)如果都没有就报错（不考虑父亲的父亲···）。</p><p>遵循就近原则。</p></li><li><p>super内存图</p><img src="https://s2.loli.net/2022/01/25/fQaLG9PsRA6M4hC.jpg" style="zoom:50%;" /></li><li><p>方法重写</p><ul><li><p>方法重写概述</p><p>子类中出现了和父类中一模一样的方法声明。</p></li><li><p>方法重写的应用</p><p>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，既沿袭了父类的功能，又定义了子类特有的内容。</p></li><li><p>快捷键：方法名+回车</p></li><li><p>@Override</p><p>是一个注解，用来帮助我们检查重写方法的方法声明的正确性。</p><p><img src="https://s2.loli.net/2022/01/25/kcoTsDexRwEy9fJ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/MAIEGcv89pkgXPf.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/JZXBzdhY5IQE7us.jpg" style="zoom:50%;" /></p></li></ul></li><li><p>方法重写的注意事项</p><p>私有（private）方法不能被重写（父类私有方法子类是不能继承的）</p><p>子类方法访问权限不能更低（public&gt;默认&gt;私有）</p></li><li><p>Java中继承的注意事项</p><img src="https://s2.loli.net/2022/01/25/HwchEedm1QUyr6T.jpg" style="zoom:50%;" /><p>name和age在Person类中用private修饰后，要加super才能赋值。</p><p><img src="https://s2.loli.net/2022/01/25/aANW4tZiOmrQwBS.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/arhOsPHSbmDIFA8.png" style="zoom:50%;" /></p></li></ol><h3 id="5-修饰符"><a href="#5-修饰符" class="headerlink" title="5.修饰符"></a>5.修饰符</h3><ol><li><p>包的概述和使用</p><ul><li><p>包其实就是文件夹，其作用是对类进行分类管理。</p></li><li><p>包的定义格式：package 包名；写在类的上方（多级包用.分开，例如二级包package com.chen;）</p></li><li><p>带包的Java类编译执行（用记事本和cmd）</p><p>手动建包：按照以前的格式编译Java文件（javac HelloWorld.java)</p><p>​                    手动创建包（在D盘建立文件夹com，然后在com下建立文件夹chen)</p><p>​                    把class文件放到包的最里面（把HelloWorld.class文件放到chen里)</p><p>​                    带包执行（java com.chen.HelloWorld)</p><p>自动建包：java -d.HelloWorld.java</p><p>​                    java com.chen.HelloWorld</p></li></ul></li><li><p>导包</p><p>使用不同包下的类时，要写类的全路径/导包</p><p>导包的格式：import 包名；</p><img src="https://s2.loli.net/2022/01/25/pXE16ki9uhFyadt.jpg" style="zoom:50%;" /></li><li><p>修饰符</p><ul><li><p>权限修饰符</p><img src="https://s2.loli.net/2022/01/25/5kCRjOMXuNcJZiI.jpg" style="zoom: 50%;" /></li><li><p>状态修饰符</p><ul><li><p>final(最终态)</p><p>修饰方法：表明该方法是最终方法，不能被重写</p><p>修饰变量：表明该变量是常量，不能再次被赋值</p><p>修饰类：表明该类是最终类，不能被继承</p><p>修饰局部变量：变量是基本类型时，其数据值不能发生改变</p><p>​                            变量是引用类型时，其地址值不能发生改变，但地址里的内容可以改变</p><p><img src="https://s2.loli.net/2022/01/25/5PivIsOMlQzmHwZ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/nlaPQwb2X6OIRzD.jpg" style="zoom:50%;" /></p></li><li><p>static(静态)</p><p>static修饰的特点：被类的所有对象共享（这也是判断是否使用静态关键字的条件)</p><p>​                                可以通过类名调用（推荐），当然也可以通过对象名调用</p><img src="https://s2.loli.net/2022/01/25/2fYM7PNg4QjD5W3.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/EPaLVpgdB1ntjwq.jpg" style="zoom:50%;" /><p>静态成员方法只能访问静态成员（变量/方法）</p><img src="https://s2.loli.net/2022/01/25/8bQXawPDEdgjqsJ.jpg" style="zoom:50%;" /></li></ul></li></ul></li></ol><h3 id="6-多态"><a href="#6-多态" class="headerlink" title="6.多态"></a>6.多态</h3><ol><li> 多态概述</li></ol><p>   同一个对象，在不同时刻表现出来的不同形态。</p><p>   多态的前提和体现：（1）有继承/实现关系；</p><p>   ​                                    （2）有方法重写；</p><p>   ​                                    （3）有父类引用指向子类对象。</p><p>   <img src="https://s2.loli.net/2022/01/26/LmEfMINo15aPlTK.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/M9I6BsV4Q53cEtn.jpg" style="zoom:50%;" /></p>   <img src="https://s2.loli.net/2022/01/26/kbZ1zc7tLsSxqKN.jpg" style="zoom:50%;" /><ol start="2"><li><p>多态中成员访问特点</p><p>成员变量：编译执行都看左边</p><p>成员方法：编译看左边，执行看右边</p><p>成员变量和成员方法的访问不一样的原因：成员方法有重写，而成员变量没有。</p><p><img src="https://s2.loli.net/2022/01/26/6x8jwmILuUhZn1e.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/hkvNuFbTAdCJWOr.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/26/os8XbdfkeMwIG1T.jpg" style="zoom:50%;" /></li><li><p>多态的好处和弊端</p><p>好处：提高了程序的扩展性，具体体现在定义方法时使用父类型作为参数，使用时用具体的子类型参与操作。</p><p><img src="https://s2.loli.net/2022/01/26/E1xGTHDQNXS9Kmk.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/bxiRKA6TCGL1lvQ.jpg" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2022/01/26/zyjnN7laqCxu29g.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/akH69VBrINMKxGy.jpg" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2022/01/26/FqmE8ItiwpZlk9g.jpg"></p><p>弊端：不能使用子类的特有功能。</p><p><img src="https://s2.loli.net/2022/01/26/m5sM9jXcgpoxOu8.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/LZTa5vR3lMzuIQw.jpg" style="zoom:50%;" /></p></li><li><p>多态中的转型</p><p><img src="https://s2.loli.net/2022/01/26/UkIeHF2mEnWpKRd.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/uJKQG6oHEgAq1Md.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/26/O2ko6WJudhsLVw7.jpg" style="zoom:50%;" /></li><li><p>多态转型内存图解</p><p><img src="https://s2.loli.net/2022/01/26/LwfIoRzKUBAGy4T.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/UsYeWcFiL3IJ4mQ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/khzSeTsGIQ3ucOA.jpg"><img src="https://s2.loli.net/2022/01/26/6pQoBWIz5NdEGKj.jpg"><img src="https://s2.loli.net/2022/01/26/1z8DNBQeHmCgFTZ.jpg"></p></li><li><p>案例</p><p>每new一次就创建一个新的地址值。</p><p><img src="https://s2.loli.net/2022/01/26/cWn8CMasDBObwgt.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/WC49po7bhLZKAjO.png" style="zoom:50%;" /></p></li></ol><img src="https://s2.loli.net/2022/01/26/codnu2B5Ae7xMig.png" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-面向对象基础&quot;&gt;&lt;a href=&quot;#1-面向对象基础&quot; class=&quot;headerlink&quot; title=&quot;1.面向对象基础&quot;&gt;&lt;/a&gt;1.面向对象基础&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;类和对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对象&lt;/p&gt;
&lt;p&gt;万物皆对象，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java基本语法知识</title>
    <link href="http://example.com/2022/01/19/Java1/"/>
    <id>http://example.com/2022/01/19/Java1/</id>
    <published>2022-01-19T06:07:32.201Z</published>
    <updated>2022-01-21T02:24:34.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1.Java概述"></a>1.Java概述</h3><ul><li>Java语言跨平台原理：在需要运行Java应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机（Java Virtual Machine)即可。</li></ul><img src="https://s2.loli.net/2022/01/18/BWh9OrQjZoYv2fq.jpg" style="zoom:50%;" /><ul><li><p>JRE和JDK</p><ul><li><p>JRE (Java Runtime Environment)</p><p> 是Java程序的运行时环境，包含JVM和运行时所需要的核心类库。</p><p> 如果想要运行一个已有的Java程序，那么只需安装JRE。</p></li><li><p>JDK (Java Development Kit)</p><p> 是Java程序开发工具包，包含JRE和开发人员使用的工具。</p><p> 其中的开发工具：编译工具（javac.exe)和运行工具（java.exe)。</p><p> 如果想要开发一个全新的Java程序，那么必须安装JDK。</p><p> JDK中的bin目录路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</p></li></ul></li></ul><img src="https://s2.loli.net/2022/01/18/4xonCuYDip326vT.jpg" style="zoom: 50%;" /><h3 id="2-第一个程序"><a href="#2-第一个程序" class="headerlink" title="2.第一个程序"></a>2.第一个程序</h3><ol><li><p>常用DOS命令</p><ol><li><p>打开命令提示符窗口</p><p>win+R</p><p>输入cmd</p><p>回车</p></li><li><p>常用命令</p></li></ol><img src="https://s2.loli.net/2022/01/18/JD7VHBtnIfxlWsT.jpg" style="zoom: 50%;" /></li><li><p>hello world案例</p><ol><li><p>Java程序开发运行流程</p><p><img src="https://s2.loli.net/2022/01/18/sTuFcPV8GI516fK.jpg"></p></li><li><p>hello world案例的编写</p><p>新建文本文档，修改名称为helloworld.java</p><p>再用记事本打开，编写程序内容</p><p>（Ctrl+S保存）</p><p><img src="https://s2.loli.net/2022/01/18/sBWdKkf43M1mZEr.jpg" style="zoom: 67%;" /><img src="https://s2.loli.net/2022/01/20/AS1zJFowpqUtDLd.jpg" style="zoom:67%;" /></p></li><li><p>hello world案例的编译和运行</p><p>打开命令提示符窗口，进入到helloworld.java所在的目录。输入指令编译和执行。</p><p>编译：javac 文件名.java</p><p>执行：java 类名</p><img src="https://s2.loli.net/2022/01/18/nwvpDL6RbTxuiZE.png" style="zoom: 67%;" /></li><li><p>常见问题</p><p>中英文符号，大小写</p><p>注意：不要隐藏文件的扩展名</p><p>​            类名和文件名要保持一致            </p></li></ol></li></ol><h3 id="3-基础语法"><a href="#3-基础语法" class="headerlink" title="3.基础语法"></a>3.基础语法</h3><ol><li><p>注释</p><p>单行注释               // 注释信息</p><p>多行注释               /* 注释信息 */</p></li><li><p>关键字</p><p>字母全部小写</p><p>常用的代码编辑器针对关键字有特殊的颜色标记</p></li><li><p>常量</p><ol><li><p>程序运行过程中其值不发生改变的量</p><img src="https://s2.loli.net/2022/01/18/ZbGhX8LKVr4cenT.jpg" style="zoom:50%;" /></li></ol><p>​        输出——时，System.out.println(“——“);</p></li><li><p>数据类型</p><ol><li><p>计算机存储单元</p><p>无论内存还是硬盘，计算机存储设备的最小信息单元叫”位(bit)”,用”b”表示。</p><p>计算机中最小的存储单元叫”字节(byte)”,用B表示，字节由连续的8个位组成。</p><p>1B=8bit</p><p>1KB=1024B</p><p>1MB=1024KB</p><p>1GB=1024MB</p><p>1TB=1024GB</p></li><li><img src="https://s2.loli.net/2022/01/18/cEZsWLih3JIGd2H.jpg" style="zoom: 50%;" /></li></ol><img src="https://s2.loli.net/2022/01/18/zlHidoExBqUFPQM.jpg" style="zoom:50%;" /></li><li><p>变量</p><p>变量的定义：数据类型 变量名=变量值；</p><p>变量的使用：取值   变量名</p><p>​                       修改   变量名=变量值；</p><p>注意事项：定义long类型变量时，在后面加L，否则会把值认为int类型而可能报错。</p><p>​                    long l=1000000000L；</p><p>​                    定义float类型变量时，在后面加F，防止类型不兼容。</p><p>​                     float f=13.2F；</p><p>​                     变量名不能重复。</p><p>​                     变量未赋值不能使用。</p></li><li><p>标识符</p><p>（给类、方法、变量等起名字的符号）</p><p>由数字、字母、下划线和$组成</p><p>不能以数字开头</p><p>不能是关键字</p><p>区分大小写<img src="https://s2.loli.net/2022/01/18/evThnZrpWRGxsHb.jpg" style="zoom:50%;" /></p></li><li><p>类型转换</p><ol><li><p>自动类型转换</p><p>把一个表示数据范围小的数值或变量赋值给另一个表示数据范围大的变量<img src="https://s2.loli.net/2022/01/18/5jhiXrvFyZfsazA.jpg" style="zoom:50%;" /></p></li><li><p>强制类型转换</p><p>把一个表示数据范围大的数值或变量赋值给另一个表示数据范围小的变量</p><p>格式：目标数据类型 变量名 = （目标数据类型) 值或者变量；</p><p>例：int k = (int)88.88;     变成88</p></li></ol></li></ol><h3 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h3><ol><li><p>算数运算符</p><ol><li><p>+-*/%</p><p>整数相除只能得到整数，要想得到小数必须有浮点数的参与。</p></li><li><p>字符的”+“操作：用字符的ASCII码进行计算</p><p>int i=10;</p><p>char c=’A’;</p><p>System.out.println(i+c);   得到75</p><p>char ch = i + c;报错<img src="https://s2.loli.net/2022/01/18/3F6YOI7yGjkX2cW.jpg" style="zoom: 50%;" /></p></li><li><p>字符串的”+“操作（字符串连接符）</p><p>System.out.println(“ch”+”en”);    得到chen</p><p>System.out.println(“chen”+936);    得到chen936</p><p>System.out.println(936+”chen”);    得到936chen</p><p>System.out.println(“小陈”+9+36);    得到小陈936</p><p>System.out.println(9+36+”小陈”);    得到936小陈     一旦出现字符串就是拼接</p></li></ol></li><li><p>赋值运算符</p><p>=</p><p>i +=2； 相当于i自增2（把左右数据做加法操作，结果赋值给左边）类似的有-=   *=   /=   %=</p><p>注意：short s=10;</p><p>​            s +=20;            //需要修改为 s=(short)(s+20);</p><p>​            System.out.println(“s:”+s);  报错，原因是扩展的赋值运算符底层隐含了强制类型转换。</p></li><li><p>自增自减运算符</p><img src="https://s2.loli.net/2022/01/18/xlsc7YVgh13inQ4.jpg" style="zoom: 50%;" /></li><li><p>关系运算符</p><p>==    !=    &gt;    &gt;=    &lt;    &lt;=</p><p>int i=10;</p><p>int j=10;</p><p>int k=20;</p><p>System.out.println(i==j);     输出结果为true</p><p>System.out.println(i==k);     输出结果为false</p></li><li><p>逻辑运算符</p><img src="https://s2.loli.net/2022/01/18/j2uqFelgnvZVGo6.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/18/tMe6jE5kCHhOiYF.jpg" style="zoom:50%;" /></li><li><p>三元运算符</p><p>格式：关系表达式 ？表达式1：表达式2；</p><p>例：a&gt;b?a:b;  得到a、b中的较大值</p><p>首先计算关系表达式的值。</p><p>如果值为true，表达式1的值就是运算结果；</p><p>如果值为false，表达式2的值就是运算结果。</p><p>boolean b = h1==h2 ? true : false;  用于判断h1和h2是否相等。</p></li></ol><h3 id="5-数据输入"><a href="#5-数据输入" class="headerlink" title="5.数据输入"></a>5.数据输入</h3><ol><li><p>Scanner使用的基本步骤<img src="https://s2.loli.net/2022/01/18/PXrvGj7c6Cl23FH.jpg"></p><p>提示输入的语句写在2，3之间。</p></li><li><p>三个和尚<img src="https://s2.loli.net/2022/01/18/C4jdyJQgatVuzZY.jpg"></p></li></ol><h3 id="6-分支语句"><a href="#6-分支语句" class="headerlink" title="6.分支语句"></a>6.分支语句</h3><ol><li><p>流程控制</p><ul><li><p>流程控制语句分类</p><p>顺序结构</p><p>分支结构</p><p>循环结构</p></li></ul></li><li><p>if语句</p><ol><li><p>格式1：</p><p>if (关系表达式) {</p><p>​    语句体；</p><p>}</p></li><li><p>格式2：</p><p>if (关系表达式) {</p><p>​    语句体1；</p><p>} else{</p><p>​    语句体2；</p><p>}</p></li><li><p>格式3：</p><p>if (关系表达式1) {</p><p>​    语句体1；</p><p>} else if (关系表达式2) {</p><p>​    语句体2；</p><p>}</p><p>···</p><p>else {</p><p>​    语句体n+1;</p><p>}</p></li></ol></li><li><p>switch语句</p><p>格式：</p><p>switch(表达式) {                                    表达式：可以是枚举、字符串</p><p>​    case 值1：</p><p>​                        语句体1；</p><p>​                        break；    </p><p>​    case 值2：</p><p>​                        语句体2；</p><p>​                        break；</p><p>​    ···</p><p>​    default：</p><p>​                        语句体n+1；</p><p>​                        break；</p><p>}</p><p>如果不写break会出现穿透现象，语句体相同时可以联写</p></li></ol><h3 id="7-循环语句"><a href="#7-循环语句" class="headerlink" title="7.循环语句"></a>7.循环语句</h3><ol><li><p>for循环语句：</p><p>for (初始化语句；条件判断语句；条件控制语句) {</p><p>​    循环体语句；</p><p>}</p></li><li><p>while循环语句：</p><p>while (条件判断语句) {</p><p>​    循环体语句；</p><p>​    条件控制语句；</p><p>}</p></li><li><p>do···while循环语句</p><p>do {</p><p>​    循环体语句；</p><p>​    条件控制语句；</p><p>} while (条件判断语句)；<img src="https://s2.loli.net/2022/01/19/zHCJmwyX7c5nFNv.jpg"></p></li><li><p>跳转控制语句</p><p>continue:用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行。</p><p>break:用在循环中，基于条件控制，终止循环体内容的执行，也就是说结束当前的整个循环。<img src="https://s2.loli.net/2022/01/19/twD2Xn4GOAE5rPL.jpg"></p><p>输出结果是1</p></li><li><p>循环嵌套</p><p>循环语句中包含循环语句称为循环嵌套（类似的有分支嵌套）。</p></li><li><p>Random</p><p><img src="https://s2.loli.net/2022/01/19/gzrCsXyUN8Htn6E.jpg"></p><p>获取1~100的随机数：int x=r.nextInt(100)+1;</p></li></ol><h3 id="8-IDEA"><a href="#8-IDEA" class="headerlink" title="8.IDEA"></a>8.IDEA</h3><ol><li><p>IDEA概述</p><p>IDEA全程IntelliJ IDEA，是用于Java语言开发的集成环境，它是业界公认的目前用于Java程序开发最好的工具。</p><p>集成环境：把代码编写、编译、执行、调试等多种功能综合到一起的开发工具。</p></li><li><p>IDEA中HelloWorld</p><ol><li><p>创建一个空项目JavaSE_Code</p><p>Module可以在窗口左上的File–New–moudle里打开，选Java和JDK的安装路径</p></li><li><p>创建一个新模块idea_test</p><p>双击src–Modules选择刚创建的idea_test–OK才会出现idea_test.iml</p></li><li><p>在idea_test模块下的src下创建一个包(com.chen)</p><p>右键点击src–New–Package–com.chen回车</p></li><li><p>在com.chen包下新建一个类(HelloWorld)</p><p>右键选这个包–New–Java Class–HelloWorld回车</p></li><li><p>在HelloWorld类中编写代码</p></li><li><p>在idea中执行程序</p><p>右键–Run···(class文件在out里)<img src="https://s2.loli.net/2022/01/19/qMVJxyjZE4Bb89l.jpg" style="zoom:67%;" /></p></li></ol></li><li><p>IDEA中项目结构</p><img src="https://s2.loli.net/2022/01/19/cNzFaIVPjSQ36si.jpg" style="zoom:50%;" /></li><li><p>IDEA中内容辅助键和快捷键</p><ul><li>快速生成语句<ul><li>快速生成main()方法：psvm,回车</li><li>快速生成输出语句：sout,回车</li></ul></li><li>注释<ul><li>单行：选中代码，Ctrl+/，再来一次就是取消</li><li>单行：选中代码，Ctrl+Shift+/，再来一次就是取消</li></ul></li><li>格式化<ul><li>Ctrl+Alt+L(登了qq的时候会把qq锁了)</li></ul></li></ul></li><li><p>IDEA中模块的操作</p><ul><li><p>新建模块</p><ul><li>File – Project Structure··· – Modules – + – New Module –Java– Next</li></ul></li><li><p>删除模块</p><ul><li>右键选择要删除的模块，Remove Module</li><li>定位：右键选择模块，Open In，Explorer（彻底删除要在硬盘里删除）</li></ul></li><li><p>导入模块</p><ul><li>File – Project Structure··· – Modules – + – Import Module –  找到需要导入的模块名称 – OK – 一直Next –Overwrite – Finish – OK – Project SDK is not difined – Setup SDK – OK</li></ul></li></ul></li></ol><h3 id="9-数组"><a href="#9-数组" class="headerlink" title="9.数组"></a>9.数组</h3><ol><li><p>数组定义格式</p><p>数组：一种用于存储多个相同类型数据的存储模型。</p><ul><li><p>格式1：数据类型[] 变量名</p><p>​              int[] arr</p><p>定义了一个int类型的数组，数组名是arr（推荐）</p></li><li><p>格式2：数据类型 变量名[]</p><p>​              int arr[]</p><p>定义了一个int类型的变量，变量名是arr数组</p></li></ul></li><li><p>数组初始化之动态初始化</p><p>Java中的数组必须先初始化，才能使用。</p><p>初始化：为数组中的数组元素分配内存空间，并为每个数组元素赋值。</p><p>动态初始化：初始化时只指定数组长度，由系统为数组分配初始值（int类型默认为0）。</p><p>格式：数据类型[] 变量名 = new 数据类型[数组长度];  new为数组申请内存空间。</p><p>​            int[] arr = new int[3];</p></li><li><p>数组元素访问</p><ul><li><p>数组变量访问方式</p><p>格式：数组名</p></li><li><p>数组内部保存的数据的访问方式</p><p>格式：数组名[索引]</p><p>索引是数组中数据的编号方式，用于访问数组中的数据，数组名[索引]等同于变量名，是一种特殊的变量名。（从0开始）</p><img src="https://s2.loli.net/2022/01/19/xFkVfm3wJdTnKDP.jpg" style="zoom:67%;" /></li></ul></li><li><p>内存分配</p><p>假定用001来标识右边那块内存空间(黑框)，称001为内存地址值。</p><p><img src="https://s2.loli.net/2022/01/19/MJYGQhX5W9geSPR.jpg"></p><p>多个数组指向相同时，任何一个数组修改了堆内存的数据，另一个数组去访问时元素值也发生改变。<img src="https://s2.loli.net/2022/01/19/sx342yS7kqVUgX5.jpg"></p><p><img src="https://s2.loli.net/2022/01/19/DhYCSbfzTeKnOt9.jpg"></p></li><li><p>数组初始化之静态初始化</p><p>初始化时指定每个数组元素的初始值，由系统决定数组长度。</p><p>格式：数据类型[] 变量名 = new 数据类型[] {数据1,数据2,数据3······}；</p><p>​            int[] arr = new int[] {1,2,3};</p><p>简化格式：数据类型[] 变量名 = {数据1,数据2,数据3······}；</p><p>​                    int[] arr = {1,2,3};</p></li><li><p>数组操作的两个常见小问题</p><ul><li><p>索引越界：访问了数组中不存在的索引对应的元素</p><p>ArrayIndexOutOfBoundsException</p></li><li><p>空指针异常：访问的数组已经不再指向堆内存的数据</p><p>NullPointerException</p><p><img src="https://s2.loli.net/2022/01/19/QWrvDg1TaYiS6Ij.jpg"></p></li></ul></li><li><p>数组常见操作</p><ul><li><p>遍历</p><p>获取数组元素个数：数组名.length</p><p>int[] arr = {······}；</p><p>for(int x=0; x&lt;arr.length; x++) {</p><p>​    System.out.println(arr[x]);</p><p>}</p></li><li><p>获取最值</p><img src="https://s2.loli.net/2022/01/19/Zep8a5QW9GLdFYz.jpg" style="zoom:50%;" /></li></ul></li></ol><h3 id="10-方法"><a href="#10-方法" class="headerlink" title="10.方法"></a>10.方法</h3><ol><li><p>方法概述</p><p>方法是将具有独立功能的代码块组织成一个整体，使其具有特殊功能的代码集。</p><ul><li><p>注意：方法必须先创建才可以使用，该过程称为方法定义。</p><p>​            方法创建后不是直接运行的，需要手动使用后才执行，该过程称为方法调用。</p><p>​            方法必须先定义后调用，否则程序将报错。</p></li></ul></li><li><p>方法的定义和调用</p><p>定义格式：public static void 方法名(){</p><p>​                    方法体</p><p>​            }</p><p>调用格式：方法名();</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.loli.net/2022/01/19/BSFu86Yt9mTXxHA.jpg"></h1></li><li><p>带参数方法的定义和调用</p><ul><li><p>定义</p><ul><li>格式(单个参数)：public static void 方法名(数据类型 变量名) {······}</li><li>格式(多个参数)：public static void 方法名(数据类型 变量名1，数据类型 变量名2，······) {······}</li></ul></li><li><p>调用</p><ul><li><p>格式(单个参数)：方法名(变量名/常量值)；</p></li><li><p>格式(多个参数)：方法名(变量名1/常量值1，变量名2/常量值2······)；</p></li></ul></li><li><p>形参(方法定义中的参数)</p><p>实参(方法调用中的参数)</p></li></ul></li><li><p>带返回值方法的定义和调用</p><ul><li><p>定义格式(方法通用格式)：public static 数据类型 方法名(参数) {</p><p>​                            方法体；</p><p>​                            return 数据；</p><p>​                    }</p><p>数据(返回值)类型和数据要匹配。</p><p>public static是修饰符。</p></li><li><p>调用格式1：方法名(参数)；</p><p>调用格式2：数据类型 变量名 = 方法名(参数)；</p><p>方法的返回值通常用变量接收，否则该返回值无意义。</p></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://s2.loli.net/2022/01/20/j5rp4EbYSd6yBNe.jpg" style="zoom:50%;" /></h1></li><li><p>方法的注意事项</p><ul><li><p>方法不能嵌套定义。</p></li><li><p>void表示无返回值，可以省略return，也可以单独书写return(一般不写)。</p><p>void类型的方法直接调用即可，非void类型的方法推荐接收调用。</p><img src="https://s2.loli.net/2022/01/20/qVTeUR86uvar4Ep.jpg" style="zoom:50%;" /></li></ul></li><li><p>方法重载</p><ol><li><p>方法重载概述</p><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载：</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数不同，类型不同或数量不同</li></ul><p>同类同名不同参。</p></li><li><p>方法重载的特点</p><ul><li><p>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</p></li><li><p>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关(不能通过返回值来判定两个方法是否相互构成重载)</p><img src="https://s2.loli.net/2022/01/20/rwdGQnoA9xB4uRp.jpg" style="zoom:50%;" /></li></ul></li></ol></li><li><p>方法的参数传递</p><ul><li><p>基本类型</p><p>对于基本数据类型的参数，形式参数的改变不影响实际参数的值。</p><img src="https://s2.loli.net/2022/01/20/QFvpZeoJNRzkUdm.jpg" style="zoom:67%;" /><img src="https://s2.loli.net/2022/01/20/R5FjNMqeH8EXGQb.jpg" style="zoom:67%;" /><p>该例两个方法中定义的number都是局部变量，只是名字相同，但物理地址、逻辑地址不同。</p><p>实参和形参占据的是两块不同的内存。</p></li><li><p>引用类型</p><p>对于引用类型的参数，形式参数的改变影响实际参数的值。</p><p><img src="https://s2.loli.net/2022/01/20/SLmT2hEZve6WkwM.jpg" style="zoom:67%;" /><img src="https://s2.loli.net/2022/01/20/ABGdS4yntLCvFMp.jpg" style="zoom:67%;" /><img src="https://s2.loli.net/2022/01/20/hQHJtgG2dTa9ecD.jpg" style="zoom:67%;" /></p></li></ul></li></ol><h3 id="11-Debug"><a href="#11-Debug" class="headerlink" title="11.Debug"></a>11.Debug</h3><ol><li><p>Debug概述</p><p>是程序调试工具，可用于查看程序的执行流程，也可用于追踪程序执行过程来调试程序。</p></li><li><p>Debug操作流程</p><p>Debug调试，又称断点调试，断点其实是一个标记，告诉我们从哪里开始查看。</p><ul><li><p>如何加断点</p><p>选择要设置断点的代码行，在行号的区域后面单击鼠标左键</p></li><li><p>如何运行加了断点的程序</p><p>代码区域右键Debug执行</p></li><li><p>看哪里</p><p>Debugger窗口，左边看代码执行到哪里，右边看代码执行过程中变量的变化</p><p>Console窗口，看程序执行过程中的结果展示</p></li><li><p>点哪里</p><p>继续执行：Step Into(F7)这个箭头，也可以直接按F7</p><p>结束：Stop</p></li><li><p>如何删除断点</p><p>选择要删除的断点，单击左键</p><p>或者点结束下面那个勾选，再点减号，再点Done</p></li></ul></li><li><p>注意事项</p><p>如果数据来自于键盘输入，一定要记得手动输入。</p></li></ol><h3 id="12-小练习"><a href="#12-小练习" class="headerlink" title="12.小练习"></a>12.小练习</h3><ul><li><p>导包</p><ul><li>手动导包：import java.util.Scanner;</li><li>快捷键导包：Alt + Enter</li><li>自动导包：创建对象时只输入一部分然后Enter</li></ul></li><li><p>取余结果为0是整除</p></li><li><img src="https://s2.loli.net/2022/01/20/veQIOLh6c87VbMs.jpg" style="zoom:50%;" /></li><li><p>反转</p><p><img src="https://s2.loli.net/2022/01/20/TvFCifQoL6JtdwV.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/20/n1Rvtr3cLXz9gG4.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/20/6pROCM3YsgEtVX8.jpg" style="zoom:50%;" /></p></li><li><p>方法中执行到return就立即返回</p><img src="https://s2.loli.net/2022/01/20/AepoGvWciNqs69x.png" style="zoom:50%;" /></li><li><p>斐波那契数列</p><img src="https://s2.loli.net/2022/01/20/otIlfmiFd8Ay43s.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/20/WXDNiuF1bOZLH76.jpg" style="zoom:50%;" /></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-Java概述&quot;&gt;&lt;a href=&quot;#1-Java概述&quot; class=&quot;headerlink&quot; title=&quot;1.Java概述&quot;&gt;&lt;/a&gt;1.Java概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java语言跨平台原理：在需要运行Java应用程序的操作系统上，安装一个与操作系</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>learn to use typora</title>
    <link href="http://example.com/2022/01/17/learn%20to%20use%20typora/"/>
    <id>http://example.com/2022/01/17/learn%20to%20use%20typora/</id>
    <published>2022-01-17T11:55:34.810Z</published>
    <updated>2022-01-21T02:21:14.964Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><p>Ctrl+n :  n级标题</p><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><p>正文</p><h3 id="2-引用"><a href="#2-引用" class="headerlink" title="2.引用"></a>2.引用</h3><p>引用 :  &gt; + 空格</p><p>退出引用 :  Shift + Tab</p><p>角标 :  </p><p>方括号里括^和数字</p><p>角标<a href="%E5%87%BA%E8%87%AA%C2%B7%C2%B7%C2%B7%C2%B7%C2%B7%C2%B7">^1</a></p><blockquote><p>引用</p></blockquote><h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h3><p>无序列表 :  Ctrl + Shift + ]</p><p>子列表 :  Tab</p><p>回退 :  Shift + Tab</p><ul><li>列表</li><li>列表<ul><li>子列表<ul><li>子列表again</li></ul></li><li>回退到上一个子列表</li></ul></li><li>再回退</li></ul><p>有序列表 :  Ctrl + Shift +[</p><ol><li>列表</li><li>列表<ol><li>子列表</li></ol></li></ol><h3 id="4-链接"><a href="#4-链接" class="headerlink" title="4.链接"></a>4.链接</h3><p>[链接名称] + (地址)</p><p><a href="www.baidu.com">百度</a></p><h3 id="5-图像"><a href="#5-图像" class="headerlink" title="5.图像"></a>5.图像</h3><p><img src="https://s2.loli.net/2022/01/17/xb8MypS2BOLKavU.jpg"></p><h3 id="6-划重点"><a href="#6-划重点" class="headerlink" title="6.划重点"></a>6.划重点</h3><p>高亮 :   <img src="https://s2.loli.net/2022/01/17/IiqoHKBjLxzGdwb.png"></p><p>==高亮==</p><p>加粗 ：Ctrl + B</p><p><strong>加粗</strong></p><p>两个*中间夹斜体</p><p><em>斜体</em></p><h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7.表格"></a>7.表格</h3><p>插入表格 ：Ctrl + T</p><table><thead><tr><th>chen</th><th></th><th></th></tr></thead><tbody><tr><td>zhang</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.代码块"></a>8.代码块</h3><p>输入3个*并按回车</p><hr><p>int c=1;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-标题&quot;&gt;&lt;a href=&quot;#1-标题&quot; class=&quot;headerlink&quot; title=&quot;1.标题&quot;&gt;&lt;/a&gt;1.标题&lt;/h3&gt;&lt;p&gt;Ctrl+n :  n级标题&lt;/p&gt;
&lt;h1 id=&quot;标题1&quot;&gt;&lt;a href=&quot;#标题1&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/11/23/hello-world/"/>
    <id>http://example.com/2021/11/23/hello-world/</id>
    <published>2021-11-23T00:27:48.068Z</published>
    <updated>2021-11-23T00:27:48.068Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
