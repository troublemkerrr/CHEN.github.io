<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHEN&#39;s Blog</title>
  
  <subtitle>a blog created by CHEN</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-26T00:43:53.946Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>CHEN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java类与接口</title>
    <link href="http://example.com/2022/01/26/Java3/"/>
    <id>http://example.com/2022/01/26/Java3/</id>
    <published>2022-01-26T00:44:08.568Z</published>
    <updated>2022-01-26T00:43:53.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-抽象类"><a href="#1-抽象类" class="headerlink" title="1.抽象类"></a>1.抽象类</h3><ol><li>抽象类概述</li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-抽象类&quot;&gt;&lt;a href=&quot;#1-抽象类&quot; class=&quot;headerlink&quot; title=&quot;1.抽象类&quot;&gt;&lt;/a&gt;1.抽象类&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;抽象类概述&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Claire&#39;s Art Show</title>
    <link href="http://example.com/2022/01/21/art/"/>
    <id>http://example.com/2022/01/21/art/</id>
    <published>2022-01-21T05:13:48.251Z</published>
    <updated>2022-01-26T00:50:00.367Z</updated>
    
    <content type="html"><![CDATA[<p>2021/12/13</p><p><img src="https://s2.loli.net/2022/01/21/EDl5TA94tbHnOvd.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2021/12/13&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/01/21/EDl5TA94tbHnOvd.jpg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java面向对象</title>
    <link href="http://example.com/2022/01/21/Java2/"/>
    <id>http://example.com/2022/01/21/Java2/</id>
    <published>2022-01-21T02:24:48.921Z</published>
    <updated>2022-01-25T18:08:26.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-面向对象基础"><a href="#1-面向对象基础" class="headerlink" title="1.面向对象基础"></a>1.面向对象基础</h3><ol><li><p>类和对象</p><ul><li><p>对象</p><p>万物皆对象，客观存在的事物皆为对象。（计算机中对象是具体的数据信息）</p></li><li><p>面向对象(行为化)</p><p>面向对象是把整个需求按照特点、功能划分，将这些存在共性的部分封装成类(类实例化后才是对象)，创建对象不是为了完成某一个步骤，而是描述某个事物在解决问题的步骤中的行为。<img src="https://s2.loli.net/2022/01/21/minu1C72ce9MvDt.jpg" style="zoom:50%;" /></p><p>面向过程(步骤化)</p><p>面向过程就是分析出实现需求所需要的步骤，通过方法一步一步实现这些步骤，接着依次调用。</p></li><li><p>类</p><p>类是对现实生活中一类具有共同属性和行为的事物的抽象，确定对象将会拥有的属性和行为。是Java程序的基本组成单位。</p></li><li><p>类的特点</p><p>类是对象的数据类型。</p><p>类是具有相同属性和行为的一组对象的集合。</p></li><li><p>对象的属性和行为</p><p>属性：对象具有的各种特征，每个对象的每个属性都拥有特定的值。</p><p>行为：对象能够执行的操作。<img src="https://s2.loli.net/2022/01/21/2hS5v6Hp3lDU4zP.jpg" style="zoom: 50%;" /></p></li><li><p>类和对象的关系</p><p>类是对象的抽象，对象是类的实体。</p></li><li><p>类的组成：属性和行为</p><p>属性：在类中通过成员变量来体现(类中方法外的变量)</p><p>行为：在类中通过成员方法来体现(和前面的方法相比去掉static关键字即可)</p></li><li><p>类的定义</p><p><img src="https://s2.loli.net/2022/01/21/zKL8DBpw1CtNqWy.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/Kr5EQkShYd1sIoD.jpg" style="zoom:50%;" /></p></li><li><p>对象的使用</p><p><img src="https://s2.loli.net/2022/01/21/miwpG9rLdFZut7A.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/AELsX5PDQH36n8N.jpg" style="zoom:50%;" /></p></li></ul></li><li><p>对象内存图</p><ul><li><p>单个对象</p><p><img src="https://s2.loli.net/2022/01/21/GoB6MtAlNmL5FTO.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/mf4IJLknZAwY6MS.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/gIw5AMhuplymb6z.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/5dgTA3pGnWUEJeO.jpg" style="zoom:50%;" /></p></li><li><p>多个对象</p><p>方法可共用，成员变量值不同。<img src="https://s2.loli.net/2022/01/21/WVH8iRghzxYOLCQ.jpg" style="zoom:50%;" /></p></li><li><p>多个对象指向相同</p><p>一个对象修改了堆内存的内容，另一个对象去访问时内容也被修改。<img src="https://s2.loli.net/2022/01/21/zrc1LTCBmdt26nb.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/EXvneCJwFrU5Qqp.jpg" style="zoom:50%;" /></p></li></ul></li><li><p>成员变量和局部变量</p><p><img src="https://s2.loli.net/2022/01/21/PKshN6CpwYE8OGF.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/bXUZ8WVeG92ptYm.jpg" style="zoom: 50%;" /></p></li><li><p>封装</p><ul><li><p>通过对象名直接访问成员变量的这种方式存在数据安全隐患。</p><img src="https://s2.loli.net/2022/01/21/3ZnCRDxlATH6t1w.jpg" style="zoom:50%;" /></li><li><p>private关键字——例：private int age；</p><ul><li><p>是一个权限修饰符</p></li><li><p>可以修饰成员（成员变量和成员方法）</p></li><li><p>作用是保护成员不被别的类使用，被private修饰的成员只在本类中才能访问</p></li><li><p>针对private修饰的成员变量，如果需要被其他类使用要提供相应的操作：</p><p>提供”get变量名()”方法，用于获取成员变量的值，方法用public修饰；</p><p>public int getAge(){</p><p>​    return age;</p><p>}</p><p>提供”set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰；</p><p>public void setAge(int a){</p><p>​    age=a;</p><p>}</p><p>方法中可以给参数加限制条件以判断其合理性。</p><p>使用：s.setAge(30);</p><img src="https://s2.loli.net/2022/01/21/HILFro7BQPi92yg.jpg" style="zoom:50%;" /></li></ul><img src="https://s2.loli.net/2022/01/21/tL1ilnPah3TUGFD.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/21/srC2K5odx1MT3cL.jpg" style="zoom:50%;" /></li><li><p>private关键字的使用</p><ul><li>把成员变量用private修饰</li><li>提供对应的getXxx()/setXxx()方法</li></ul></li><li><p>this关键字</p><ul><li><p>this修饰的变量用于指代成员变量</p><img src="https://s2.loli.net/2022/01/22/o3g6aTpLhjyJQVx.jpg" style="zoom:50%;" /></li><li><p>解决局部变量隐藏成员变量时用this</p></li><li><p>方法被哪个对象调用，this就代表哪个对象</p></li><li><p>this内存原理</p><p><img src="https://s2.loli.net/2022/01/22/zopvVH3mLEfcikw.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/22/SLuxcOEIg68qVeB.jpg" style="zoom:50%;" /></p></li></ul></li><li><p>封装</p><ul><li><p>封装概述</p><p>是面向对象三大特征之一（封装，继承，多态）。</p><p>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作。</p></li><li><p>封装原则</p><p>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问成员变量private，提供对应的getXxx()/setXxx()方法。</p></li><li><p>封装好处</p><p>通过方法来控制成员变量的操作，提高了代码的安全性。</p><p>把代码用方法进行封装，提高了代码的复用性。</p></li></ul></li></ul></li><li><p>构造方法</p><ul><li><p>构造方法是一种特殊的方法</p><p>作用：创建对象，且可以实现直接赋值</p><p>功能：主要是完成对象数据的初始化</p><p>格式：修饰符 类名(参数){</p><p>​            }</p><p>​            修饰符一般用public</p><p><img src="https://s2.loli.net/2022/01/22/HiVmoNrbGO5n7Rt.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/22/6KmuL9exs8AqRUk.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/22/tQ7bwG3APDBrz91.jpg" style="zoom:50%;" /></li><li><p>注意事项：</p><ul><li><p>构造方法的创建：</p><p>如果没有定义构造方法，系统将给出一个默认的无参数构造方法。</p><p>如果定义了构造方法，系统将不再提供默认的构造方法。</p></li><li><p>构造方法的重载：</p><p>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法。</p></li><li><p>推荐的使用方式：</p><p>无论是否使用，都手写无参数构造方法。</p><img src="https://s2.loli.net/2022/01/22/mNvBocC8Xh6R7Zl.jpg" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/01/22/LVRgFADzQ7m1f4I.jpg"></p></li></ul></li></ul></li></ol><h3 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h3><ol><li><p>API</p><ul><li><p>API概述</p><img src="https://s2.loli.net/2022/01/22/UWL9fS1VotBmlOK.jpg" style="zoom:50%;" /></li><li><p>如何使用帮助文档</p><p>右键打开/双击打开—找到索引下的搜索框—输入Random回车—看Random类在哪个包下(软件包：java.util)如果是java.lang则不需要导包—往下，看类的描述信息(知道它用来干什么)—看构造方法—看成员方法(返回值，方法名，参数，描述信息)</p><p><img src="https://s2.loli.net/2022/01/22/NipXy5nj7W4HfZ8.jpg"></p></li></ul></li><li><p>String</p><ul><li><p>String概述</p><img src="https://s2.loli.net/2022/01/22/abR4FgGHteYdZnN.jpg" style="zoom:50%;" /></li><li><p>String构造方法</p><img src="https://s2.loli.net/2022/01/22/WBS26bZ3FfV4xpP.jpg" style="zoom:50%;" /></li></ul><img src="https://s2.loli.net/2022/01/22/ygcPQhS4fIAOGkY.jpg" style="zoom:50%;" /><ul><li>String对象的特点</li></ul><img src="https://s2.loli.net/2022/01/22/uOBdlILmEJXF8v4.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/22/xmrRi8hyj4UuN1X.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/22/5lb2siZHtU7TI8k.jpg" style="zoom:50%;" /><ul><li><p>字符串的比较</p><ul><li><p>使用==作比较</p><p>基本类型：比较数据值</p><p>引用类型：比较地址值</p></li><li><p>字符串是对象，通过equals()方法比较内容是否相同</p><p>public boolean equals(Object anObject)</p><p>使用范例：System.out.println(s1.equals(s2));</p></li><li><p>案例：用户登录</p><img src="https://s2.loli.net/2022/01/22/gOqNTb1DLCZYMjI.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/22/3IfC4NwP8JcljRo.jpg" style="zoom:50%;" /></li></ul></li><li><p>遍历字符串</p><img src="https://s2.loli.net/2022/01/22/Y2XfWFNgRPL1q6S.jpg" style="zoom:50%;" /><p>char ch = s.charAt(i);</p><p>倒着遍历时是i–。</p><img src="https://s2.loli.net/2022/01/23/rgH3ouGQaSs4PWY.png" style="zoom:50%;" /></li></ul></li><li><p>StringBuilder</p><ul><li><p>StringBuilder概述</p><img src="https://s2.loli.net/2022/01/23/9nOxWVbQcasgJGB.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/DMfp2qSTI9cwFla.jpg" style="zoom:50%;" /><p>StringBuilder是一个可变的字符串类（可变指StringBuilder对象中的内容可变，而String对象中内容不可变），可以把它看成一个容器。</p></li><li><p>StringBuilder构造方法</p><img src="https://s2.loli.net/2022/01/23/3KeC6MaTJfjFDSn.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/shldIqypKUtnkST.jpg" style="zoom:50%;" /></li><li><p>StringBuilder的添加和反转方法</p><img src="https://s2.loli.net/2022/01/23/S2taWEYblRvXkdj.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/wiFDjAPeod8Wg7J.jpg" style="zoom:50%;" /></li><li><p>StringBuilder和String相互转换</p><ul><li><p>StringBuilder转换为String</p><p>public String toString():通过toString实现</p></li><li><p>String转换为StringBuilder</p><p>public StringBuilder(String s):通过构造方法实现</p><img src="https://s2.loli.net/2022/01/23/l9aGjXV5fpYc6nU.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/PxYDKj8OH13Wyl9.jpg" style="zoom:50%;" /></li></ul></li></ul></li></ol><h3 id="3-集合基础"><a href="#3-集合基础" class="headerlink" title="3.集合基础"></a>3.集合基础</h3><ol><li><p>集合概述</p><p>数组长度固定且不动态化。</p><p>集合类的特点：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变。</p><p>ArrayList&lt; E&gt;:可调整大小的数组实现</p><p>​                        &lt; E&gt;是一种特殊的数据类型，泛型</p><p>怎么用？在出现E的地方使用数据类型替换即可。例：ArrayList&lt; String&gt;,ArrayList&lt; Student&gt;</p></li><li><p>ArrayList构造方法和添加方法（需要导包）</p><img src="https://s2.loli.net/2022/01/23/wP5QaOvoAZzWhnl.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/2fuSrXh9HvCnegR.jpg" style="zoom:50%;" /></li><li><p>ArrayList常用方法</p><img src="https://s2.loli.net/2022/01/23/QM4gFnrU8ib7Zzf.jpg" style="zoom:50%;" /></li><li><p>遍历集合通用格式</p><img src="https://s2.loli.net/2022/01/23/HBlIfdQNcgxeVSa.jpg" style="zoom:50%;" /></li><li><p>案例</p></li></ol><p><img src="https://s2.loli.net/2022/01/23/4s5yhvDgrFbAe9T.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/23/Cms8jLXTNOcGinl.jpg" style="zoom:50%;" /></p><p>升级版：</p><p><img src="https://s2.loli.net/2022/01/23/97jfXZsiFu2To4p.png" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/01/23/5Ux7Tuj8gdpI3Z9.png" style="zoom: 25%;" /></p><p>快捷键：Alt+Fn+Insert 生成构造和get、set方法</p><p>​                构造方法 Constructor：第一个，无参构造 ； 用Shift可以全选下面所有，带参构造。</p><p>​                get和set方法 Getter and Setter</p><p>\t 其实就是Tab键的位置，要用”“括起来</p><p>System.exit(0);  JVM退出</p><p>集合中无信息时，array.size()=0</p><p>方法中让程序不再往下执行可以直接添加return;</p><h3 id="4-继承"><a href="#4-继承" class="headerlink" title="4.继承"></a>4.继承</h3><ol><li><p>继承概述</p><img src="https://s2.loli.net/2022/01/24/HfkyDQTA3sSxZdc.jpg" style="zoom: 33%;" /><p>继承是面向对象三大特征之一。可以使得子类（派生类）具有父类（基类、超类）的属性和方法，还可以在子类中重新定义、追加属性和方法。</p><p>格式：public class 子类名 extends 父类名{ }</p><p>继承中子类的特点：(1)子类可以有父类的内容；(2)子类还可以有自己的内容。</p></li><li><p>继承的好处和弊端</p><ul><li><p>好处：</p><p>提高代码复用性（多个类中相同的成员可以放到一个类中）</p><p>提高了代码的维护性（如果方法的代码需要修改，改一处即可）</p></li><li><p>弊端：</p><p>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类不得不跟着变化，削弱了子类的独立性</p></li><li><p>什么时候用继承</p><p>如果满足A类是B类的一种就用继承</p></li></ul></li><li><p>继承中变量的访问特点</p><p>在子类方法中访问一个变量：(1)子类局部范围（该方法里）找；(2)子类成员范围找；(3)父类成员范围找；(4)如果都没有就报错（不考虑父亲的父亲···）。</p><p>遵循就近原则。</p></li><li><p>super</p><img src="https://s2.loli.net/2022/01/25/9RNbcv3dnwiW8oQ.jpg" style="zoom:50%;" /></li><li><p>继承中构造方法的访问特点</p><img src="https://s2.loli.net/2022/01/25/6eKYo92Ht1ZAq5y.jpg" style="zoom:67%;" /><p><img src="https://s2.loli.net/2022/01/25/ukXGUpghm7YcIoe.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/xviSWd6YM3DV82w.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/25/3Kfub9UOd7GQrso.jpg" style="zoom:67%;" /></li><li><p>继承中成员方法的访问特点</p><p>通过子类对象访问一个方法：(1)子类成员范围找；(2)父类成员范围找；(3)如果都没有就报错（不考虑父亲的父亲···）。</p><p>遵循就近原则。</p></li><li><p>super内存图</p><img src="https://s2.loli.net/2022/01/25/fQaLG9PsRA6M4hC.jpg" style="zoom:50%;" /></li><li><p>方法重写</p><ul><li><p>方法重写概述</p><p>子类中出现了和父类中一模一样的方法声明。</p></li><li><p>方法重写的应用</p><p>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，既沿袭了父类的功能，又定义了子类特有的内容。</p></li><li><p>快捷键：方法名+回车</p></li><li><p>@Override</p><p>是一个注解，用来帮助我们检查重写方法的方法声明的正确性。</p><p><img src="https://s2.loli.net/2022/01/25/kcoTsDexRwEy9fJ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/MAIEGcv89pkgXPf.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/JZXBzdhY5IQE7us.jpg" style="zoom:50%;" /></p></li></ul></li><li><p>方法重写的注意事项</p><p>私有（private）方法不能被重写（父类私有方法子类是不能继承的）</p><p>子类方法访问权限不能更低（public&gt;默认&gt;私有）</p></li><li><p>Java中继承的注意事项</p><img src="https://s2.loli.net/2022/01/25/HwchEedm1QUyr6T.jpg" style="zoom:50%;" /><p>name和age在Person类中用private修饰后，要加super才能赋值。</p><p><img src="https://s2.loli.net/2022/01/25/aANW4tZiOmrQwBS.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/arhOsPHSbmDIFA8.png" style="zoom:50%;" /></p></li></ol><h3 id="5-修饰符"><a href="#5-修饰符" class="headerlink" title="5.修饰符"></a>5.修饰符</h3><ol><li><p>包的概述和使用</p><ul><li><p>包其实就是文件夹，其作用是对类进行分类管理。</p></li><li><p>包的定义格式：package 包名；写在类的上方（多级包用.分开，例如二级包package com.chen;）</p></li><li><p>带包的Java类编译执行（用记事本和cmd）</p><p>手动建包：按照以前的格式编译Java文件（javac HelloWorld.java)</p><p>​                    手动创建包（在D盘建立文件夹com，然后在com下建立文件夹chen)</p><p>​                    把class文件放到包的最里面（把HelloWorld.class文件放到chen里)</p><p>​                    带包执行（java com.chen.HelloWorld)</p><p>自动建包：java -d.HelloWorld.java</p><p>​                    java com.chen.HelloWorld</p></li></ul></li><li><p>导包</p><p>使用不同包下的类时，要写类的全路径/导包</p><p>导包的格式：import 包名；</p><img src="https://s2.loli.net/2022/01/25/pXE16ki9uhFyadt.jpg" style="zoom:50%;" /></li><li><p>修饰符</p><ul><li><p>权限修饰符</p><img src="https://s2.loli.net/2022/01/25/5kCRjOMXuNcJZiI.jpg" style="zoom: 50%;" /></li><li><p>状态修饰符</p><ul><li><p>final(最终态)</p><p>修饰方法：表明该方法是最终方法，不能被重写</p><p>修饰变量：表明该变量是常量，不能再次被赋值</p><p>修饰类：表明该类是最终类，不能被继承</p><p>修饰局部变量：变量是基本类型时，其数据值不能发生改变</p><p>​                            变量是引用类型时，其地址值不能发生改变，但地址里的内容可以改变</p><p><img src="https://s2.loli.net/2022/01/25/5PivIsOMlQzmHwZ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/nlaPQwb2X6OIRzD.jpg" style="zoom:50%;" /></p></li><li><p>static(静态)</p><p>static修饰的特点：被类的所有对象共享（这也是判断是否使用静态关键字的条件)</p><p>​                                可以通过类名调用（推荐），当然也可以通过对象名调用</p><img src="https://s2.loli.net/2022/01/25/2fYM7PNg4QjD5W3.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/25/EPaLVpgdB1ntjwq.jpg" style="zoom:50%;" /><p>静态成员方法只能访问静态成员（变量/方法）</p><img src="https://s2.loli.net/2022/01/25/8bQXawPDEdgjqsJ.jpg" style="zoom:50%;" /></li></ul></li></ul></li></ol><h3 id="6-多态"><a href="#6-多态" class="headerlink" title="6.多态"></a>6.多态</h3><ol><li> 多态概述</li></ol><p>   同一个对象，在不同时刻表现出来的不同形态。</p><p>   多态的前提和体现：（1）有继承/实现关系；</p><p>   ​                                    （2）有方法重写；</p><p>   ​                                    （3）有父类引用指向子类对象。</p><p>   <img src="https://s2.loli.net/2022/01/26/LmEfMINo15aPlTK.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/M9I6BsV4Q53cEtn.jpg" style="zoom:50%;" /></p>   <img src="https://s2.loli.net/2022/01/26/kbZ1zc7tLsSxqKN.jpg" style="zoom:50%;" /><ol start="2"><li><p>多态中成员访问特点</p><p>成员变量：编译执行都看左边</p><p>成员方法：编译看左边，执行看右边</p><p>成员变量和成员方法的访问不一样的原因：成员方法有重写，而成员变量没有。</p><p><img src="https://s2.loli.net/2022/01/26/6x8jwmILuUhZn1e.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/hkvNuFbTAdCJWOr.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/26/os8XbdfkeMwIG1T.jpg" style="zoom:50%;" /></li><li><p>多态的好处和弊端</p><p>好处：提高了程序的扩展性，具体体现在定义方法时使用父类型作为参数，使用时用具体的子类型参与操作。</p><p><img src="https://s2.loli.net/2022/01/26/E1xGTHDQNXS9Kmk.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/bxiRKA6TCGL1lvQ.jpg" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2022/01/26/zyjnN7laqCxu29g.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/akH69VBrINMKxGy.jpg" style="zoom:50%;" /></p><p><img src="https://s2.loli.net/2022/01/26/FqmE8ItiwpZlk9g.jpg"></p><p>弊端：不能使用子类的特有功能。</p><p><img src="https://s2.loli.net/2022/01/26/m5sM9jXcgpoxOu8.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/LZTa5vR3lMzuIQw.jpg" style="zoom:50%;" /></p></li><li><p>多态中的转型</p><p><img src="https://s2.loli.net/2022/01/26/UkIeHF2mEnWpKRd.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/uJKQG6oHEgAq1Md.jpg" style="zoom:50%;" /></p><img src="https://s2.loli.net/2022/01/26/O2ko6WJudhsLVw7.jpg" style="zoom:50%;" /></li><li><p>多态转型内存图解</p><p><img src="https://s2.loli.net/2022/01/26/LwfIoRzKUBAGy4T.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/UsYeWcFiL3IJ4mQ.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/khzSeTsGIQ3ucOA.jpg"><img src="https://s2.loli.net/2022/01/26/6pQoBWIz5NdEGKj.jpg"><img src="https://s2.loli.net/2022/01/26/1z8DNBQeHmCgFTZ.jpg"></p></li><li><p>案例</p><p>每new一次就创建一个新的地址值。</p><p><img src="https://s2.loli.net/2022/01/26/cWn8CMasDBObwgt.png" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/26/WC49po7bhLZKAjO.png" style="zoom:50%;" /></p></li></ol><img src="https://s2.loli.net/2022/01/26/codnu2B5Ae7xMig.png" style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-面向对象基础&quot;&gt;&lt;a href=&quot;#1-面向对象基础&quot; class=&quot;headerlink&quot; title=&quot;1.面向对象基础&quot;&gt;&lt;/a&gt;1.面向对象基础&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;类和对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对象&lt;/p&gt;
&lt;p&gt;万物皆对象，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java基本语法知识</title>
    <link href="http://example.com/2022/01/19/Java1/"/>
    <id>http://example.com/2022/01/19/Java1/</id>
    <published>2022-01-19T06:07:32.201Z</published>
    <updated>2022-01-21T02:24:34.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1.Java概述"></a>1.Java概述</h3><ul><li>Java语言跨平台原理：在需要运行Java应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机（Java Virtual Machine)即可。</li></ul><img src="https://s2.loli.net/2022/01/18/BWh9OrQjZoYv2fq.jpg" style="zoom:50%;" /><ul><li><p>JRE和JDK</p><ul><li><p>JRE (Java Runtime Environment)</p><p> 是Java程序的运行时环境，包含JVM和运行时所需要的核心类库。</p><p> 如果想要运行一个已有的Java程序，那么只需安装JRE。</p></li><li><p>JDK (Java Development Kit)</p><p> 是Java程序开发工具包，包含JRE和开发人员使用的工具。</p><p> 其中的开发工具：编译工具（javac.exe)和运行工具（java.exe)。</p><p> 如果想要开发一个全新的Java程序，那么必须安装JDK。</p><p> JDK中的bin目录路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</p></li></ul></li></ul><img src="https://s2.loli.net/2022/01/18/4xonCuYDip326vT.jpg" style="zoom: 50%;" /><h3 id="2-第一个程序"><a href="#2-第一个程序" class="headerlink" title="2.第一个程序"></a>2.第一个程序</h3><ol><li><p>常用DOS命令</p><ol><li><p>打开命令提示符窗口</p><p>win+R</p><p>输入cmd</p><p>回车</p></li><li><p>常用命令</p></li></ol><img src="https://s2.loli.net/2022/01/18/JD7VHBtnIfxlWsT.jpg" style="zoom: 50%;" /></li><li><p>hello world案例</p><ol><li><p>Java程序开发运行流程</p><p><img src="https://s2.loli.net/2022/01/18/sTuFcPV8GI516fK.jpg"></p></li><li><p>hello world案例的编写</p><p>新建文本文档，修改名称为helloworld.java</p><p>再用记事本打开，编写程序内容</p><p>（Ctrl+S保存）</p><p><img src="https://s2.loli.net/2022/01/18/sBWdKkf43M1mZEr.jpg" style="zoom: 67%;" /><img src="https://s2.loli.net/2022/01/20/AS1zJFowpqUtDLd.jpg" style="zoom:67%;" /></p></li><li><p>hello world案例的编译和运行</p><p>打开命令提示符窗口，进入到helloworld.java所在的目录。输入指令编译和执行。</p><p>编译：javac 文件名.java</p><p>执行：java 类名</p><img src="https://s2.loli.net/2022/01/18/nwvpDL6RbTxuiZE.png" style="zoom: 67%;" /></li><li><p>常见问题</p><p>中英文符号，大小写</p><p>注意：不要隐藏文件的扩展名</p><p>​            类名和文件名要保持一致            </p></li></ol></li></ol><h3 id="3-基础语法"><a href="#3-基础语法" class="headerlink" title="3.基础语法"></a>3.基础语法</h3><ol><li><p>注释</p><p>单行注释               // 注释信息</p><p>多行注释               /* 注释信息 */</p></li><li><p>关键字</p><p>字母全部小写</p><p>常用的代码编辑器针对关键字有特殊的颜色标记</p></li><li><p>常量</p><ol><li><p>程序运行过程中其值不发生改变的量</p><img src="https://s2.loli.net/2022/01/18/ZbGhX8LKVr4cenT.jpg" style="zoom:50%;" /></li></ol><p>​        输出——时，System.out.println(“——“);</p></li><li><p>数据类型</p><ol><li><p>计算机存储单元</p><p>无论内存还是硬盘，计算机存储设备的最小信息单元叫”位(bit)”,用”b”表示。</p><p>计算机中最小的存储单元叫”字节(byte)”,用B表示，字节由连续的8个位组成。</p><p>1B=8bit</p><p>1KB=1024B</p><p>1MB=1024KB</p><p>1GB=1024MB</p><p>1TB=1024GB</p></li><li><img src="https://s2.loli.net/2022/01/18/cEZsWLih3JIGd2H.jpg" style="zoom: 50%;" /></li></ol><img src="https://s2.loli.net/2022/01/18/zlHidoExBqUFPQM.jpg" style="zoom:50%;" /></li><li><p>变量</p><p>变量的定义：数据类型 变量名=变量值；</p><p>变量的使用：取值   变量名</p><p>​                       修改   变量名=变量值；</p><p>注意事项：定义long类型变量时，在后面加L，否则会把值认为int类型而可能报错。</p><p>​                    long l=1000000000L；</p><p>​                    定义float类型变量时，在后面加F，防止类型不兼容。</p><p>​                     float f=13.2F；</p><p>​                     变量名不能重复。</p><p>​                     变量未赋值不能使用。</p></li><li><p>标识符</p><p>（给类、方法、变量等起名字的符号）</p><p>由数字、字母、下划线和$组成</p><p>不能以数字开头</p><p>不能是关键字</p><p>区分大小写<img src="https://s2.loli.net/2022/01/18/evThnZrpWRGxsHb.jpg" style="zoom:50%;" /></p></li><li><p>类型转换</p><ol><li><p>自动类型转换</p><p>把一个表示数据范围小的数值或变量赋值给另一个表示数据范围大的变量<img src="https://s2.loli.net/2022/01/18/5jhiXrvFyZfsazA.jpg" style="zoom:50%;" /></p></li><li><p>强制类型转换</p><p>把一个表示数据范围大的数值或变量赋值给另一个表示数据范围小的变量</p><p>格式：目标数据类型 变量名 = （目标数据类型) 值或者变量；</p><p>例：int k = (int)88.88;     变成88</p></li></ol></li></ol><h3 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h3><ol><li><p>算数运算符</p><ol><li><p>+-*/%</p><p>整数相除只能得到整数，要想得到小数必须有浮点数的参与。</p></li><li><p>字符的”+“操作：用字符的ASCII码进行计算</p><p>int i=10;</p><p>char c=’A’;</p><p>System.out.println(i+c);   得到75</p><p>char ch = i + c;报错<img src="https://s2.loli.net/2022/01/18/3F6YOI7yGjkX2cW.jpg" style="zoom: 50%;" /></p></li><li><p>字符串的”+“操作（字符串连接符）</p><p>System.out.println(“ch”+”en”);    得到chen</p><p>System.out.println(“chen”+936);    得到chen936</p><p>System.out.println(936+”chen”);    得到936chen</p><p>System.out.println(“小陈”+9+36);    得到小陈936</p><p>System.out.println(9+36+”小陈”);    得到936小陈     一旦出现字符串就是拼接</p></li></ol></li><li><p>赋值运算符</p><p>=</p><p>i +=2； 相当于i自增2（把左右数据做加法操作，结果赋值给左边）类似的有-=   *=   /=   %=</p><p>注意：short s=10;</p><p>​            s +=20;            //需要修改为 s=(short)(s+20);</p><p>​            System.out.println(“s:”+s);  报错，原因是扩展的赋值运算符底层隐含了强制类型转换。</p></li><li><p>自增自减运算符</p><img src="https://s2.loli.net/2022/01/18/xlsc7YVgh13inQ4.jpg" style="zoom: 50%;" /></li><li><p>关系运算符</p><p>==    !=    &gt;    &gt;=    &lt;    &lt;=</p><p>int i=10;</p><p>int j=10;</p><p>int k=20;</p><p>System.out.println(i==j);     输出结果为true</p><p>System.out.println(i==k);     输出结果为false</p></li><li><p>逻辑运算符</p><img src="https://s2.loli.net/2022/01/18/j2uqFelgnvZVGo6.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/18/tMe6jE5kCHhOiYF.jpg" style="zoom:50%;" /></li><li><p>三元运算符</p><p>格式：关系表达式 ？表达式1：表达式2；</p><p>例：a&gt;b?a:b;  得到a、b中的较大值</p><p>首先计算关系表达式的值。</p><p>如果值为true，表达式1的值就是运算结果；</p><p>如果值为false，表达式2的值就是运算结果。</p><p>boolean b = h1==h2 ? true : false;  用于判断h1和h2是否相等。</p></li></ol><h3 id="5-数据输入"><a href="#5-数据输入" class="headerlink" title="5.数据输入"></a>5.数据输入</h3><ol><li><p>Scanner使用的基本步骤<img src="https://s2.loli.net/2022/01/18/PXrvGj7c6Cl23FH.jpg"></p><p>提示输入的语句写在2，3之间。</p></li><li><p>三个和尚<img src="https://s2.loli.net/2022/01/18/C4jdyJQgatVuzZY.jpg"></p></li></ol><h3 id="6-分支语句"><a href="#6-分支语句" class="headerlink" title="6.分支语句"></a>6.分支语句</h3><ol><li><p>流程控制</p><ul><li><p>流程控制语句分类</p><p>顺序结构</p><p>分支结构</p><p>循环结构</p></li></ul></li><li><p>if语句</p><ol><li><p>格式1：</p><p>if (关系表达式) {</p><p>​    语句体；</p><p>}</p></li><li><p>格式2：</p><p>if (关系表达式) {</p><p>​    语句体1；</p><p>} else{</p><p>​    语句体2；</p><p>}</p></li><li><p>格式3：</p><p>if (关系表达式1) {</p><p>​    语句体1；</p><p>} else if (关系表达式2) {</p><p>​    语句体2；</p><p>}</p><p>···</p><p>else {</p><p>​    语句体n+1;</p><p>}</p></li></ol></li><li><p>switch语句</p><p>格式：</p><p>switch(表达式) {                                    表达式：可以是枚举、字符串</p><p>​    case 值1：</p><p>​                        语句体1；</p><p>​                        break；    </p><p>​    case 值2：</p><p>​                        语句体2；</p><p>​                        break；</p><p>​    ···</p><p>​    default：</p><p>​                        语句体n+1；</p><p>​                        break；</p><p>}</p><p>如果不写break会出现穿透现象，语句体相同时可以联写</p></li></ol><h3 id="7-循环语句"><a href="#7-循环语句" class="headerlink" title="7.循环语句"></a>7.循环语句</h3><ol><li><p>for循环语句：</p><p>for (初始化语句；条件判断语句；条件控制语句) {</p><p>​    循环体语句；</p><p>}</p></li><li><p>while循环语句：</p><p>while (条件判断语句) {</p><p>​    循环体语句；</p><p>​    条件控制语句；</p><p>}</p></li><li><p>do···while循环语句</p><p>do {</p><p>​    循环体语句；</p><p>​    条件控制语句；</p><p>} while (条件判断语句)；<img src="https://s2.loli.net/2022/01/19/zHCJmwyX7c5nFNv.jpg"></p></li><li><p>跳转控制语句</p><p>continue:用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行。</p><p>break:用在循环中，基于条件控制，终止循环体内容的执行，也就是说结束当前的整个循环。<img src="https://s2.loli.net/2022/01/19/twD2Xn4GOAE5rPL.jpg"></p><p>输出结果是1</p></li><li><p>循环嵌套</p><p>循环语句中包含循环语句称为循环嵌套（类似的有分支嵌套）。</p></li><li><p>Random</p><p><img src="https://s2.loli.net/2022/01/19/gzrCsXyUN8Htn6E.jpg"></p><p>获取1~100的随机数：int x=r.nextInt(100)+1;</p></li></ol><h3 id="8-IDEA"><a href="#8-IDEA" class="headerlink" title="8.IDEA"></a>8.IDEA</h3><ol><li><p>IDEA概述</p><p>IDEA全程IntelliJ IDEA，是用于Java语言开发的集成环境，它是业界公认的目前用于Java程序开发最好的工具。</p><p>集成环境：把代码编写、编译、执行、调试等多种功能综合到一起的开发工具。</p></li><li><p>IDEA中HelloWorld</p><ol><li><p>创建一个空项目JavaSE_Code</p><p>Module可以在窗口左上的File–New–moudle里打开，选Java和JDK的安装路径</p></li><li><p>创建一个新模块idea_test</p><p>双击src–Modules选择刚创建的idea_test–OK才会出现idea_test.iml</p></li><li><p>在idea_test模块下的src下创建一个包(com.chen)</p><p>右键点击src–New–Package–com.chen回车</p></li><li><p>在com.chen包下新建一个类(HelloWorld)</p><p>右键选这个包–New–Java Class–HelloWorld回车</p></li><li><p>在HelloWorld类中编写代码</p></li><li><p>在idea中执行程序</p><p>右键–Run···(class文件在out里)<img src="https://s2.loli.net/2022/01/19/qMVJxyjZE4Bb89l.jpg" style="zoom:67%;" /></p></li></ol></li><li><p>IDEA中项目结构</p><img src="https://s2.loli.net/2022/01/19/cNzFaIVPjSQ36si.jpg" style="zoom:50%;" /></li><li><p>IDEA中内容辅助键和快捷键</p><ul><li>快速生成语句<ul><li>快速生成main()方法：psvm,回车</li><li>快速生成输出语句：sout,回车</li></ul></li><li>注释<ul><li>单行：选中代码，Ctrl+/，再来一次就是取消</li><li>单行：选中代码，Ctrl+Shift+/，再来一次就是取消</li></ul></li><li>格式化<ul><li>Ctrl+Alt+L(登了qq的时候会把qq锁了)</li></ul></li></ul></li><li><p>IDEA中模块的操作</p><ul><li><p>新建模块</p><ul><li>File – Project Structure··· – Modules – + – New Module –Java– Next</li></ul></li><li><p>删除模块</p><ul><li>右键选择要删除的模块，Remove Module</li><li>定位：右键选择模块，Open In，Explorer（彻底删除要在硬盘里删除）</li></ul></li><li><p>导入模块</p><ul><li>File – Project Structure··· – Modules – + – Import Module –  找到需要导入的模块名称 – OK – 一直Next –Overwrite – Finish – OK – Project SDK is not difined – Setup SDK – OK</li></ul></li></ul></li></ol><h3 id="9-数组"><a href="#9-数组" class="headerlink" title="9.数组"></a>9.数组</h3><ol><li><p>数组定义格式</p><p>数组：一种用于存储多个相同类型数据的存储模型。</p><ul><li><p>格式1：数据类型[] 变量名</p><p>​              int[] arr</p><p>定义了一个int类型的数组，数组名是arr（推荐）</p></li><li><p>格式2：数据类型 变量名[]</p><p>​              int arr[]</p><p>定义了一个int类型的变量，变量名是arr数组</p></li></ul></li><li><p>数组初始化之动态初始化</p><p>Java中的数组必须先初始化，才能使用。</p><p>初始化：为数组中的数组元素分配内存空间，并为每个数组元素赋值。</p><p>动态初始化：初始化时只指定数组长度，由系统为数组分配初始值（int类型默认为0）。</p><p>格式：数据类型[] 变量名 = new 数据类型[数组长度];  new为数组申请内存空间。</p><p>​            int[] arr = new int[3];</p></li><li><p>数组元素访问</p><ul><li><p>数组变量访问方式</p><p>格式：数组名</p></li><li><p>数组内部保存的数据的访问方式</p><p>格式：数组名[索引]</p><p>索引是数组中数据的编号方式，用于访问数组中的数据，数组名[索引]等同于变量名，是一种特殊的变量名。（从0开始）</p><img src="https://s2.loli.net/2022/01/19/xFkVfm3wJdTnKDP.jpg" style="zoom:67%;" /></li></ul></li><li><p>内存分配</p><p>假定用001来标识右边那块内存空间(黑框)，称001为内存地址值。</p><p><img src="https://s2.loli.net/2022/01/19/MJYGQhX5W9geSPR.jpg"></p><p>多个数组指向相同时，任何一个数组修改了堆内存的数据，另一个数组去访问时元素值也发生改变。<img src="https://s2.loli.net/2022/01/19/sx342yS7kqVUgX5.jpg"></p><p><img src="https://s2.loli.net/2022/01/19/DhYCSbfzTeKnOt9.jpg"></p></li><li><p>数组初始化之静态初始化</p><p>初始化时指定每个数组元素的初始值，由系统决定数组长度。</p><p>格式：数据类型[] 变量名 = new 数据类型[] {数据1,数据2,数据3······}；</p><p>​            int[] arr = new int[] {1,2,3};</p><p>简化格式：数据类型[] 变量名 = {数据1,数据2,数据3······}；</p><p>​                    int[] arr = {1,2,3};</p></li><li><p>数组操作的两个常见小问题</p><ul><li><p>索引越界：访问了数组中不存在的索引对应的元素</p><p>ArrayIndexOutOfBoundsException</p></li><li><p>空指针异常：访问的数组已经不再指向堆内存的数据</p><p>NullPointerException</p><p><img src="https://s2.loli.net/2022/01/19/QWrvDg1TaYiS6Ij.jpg"></p></li></ul></li><li><p>数组常见操作</p><ul><li><p>遍历</p><p>获取数组元素个数：数组名.length</p><p>int[] arr = {······}；</p><p>for(int x=0; x&lt;arr.length; x++) {</p><p>​    System.out.println(arr[x]);</p><p>}</p></li><li><p>获取最值</p><img src="https://s2.loli.net/2022/01/19/Zep8a5QW9GLdFYz.jpg" style="zoom:50%;" /></li></ul></li></ol><h3 id="10-方法"><a href="#10-方法" class="headerlink" title="10.方法"></a>10.方法</h3><ol><li><p>方法概述</p><p>方法是将具有独立功能的代码块组织成一个整体，使其具有特殊功能的代码集。</p><ul><li><p>注意：方法必须先创建才可以使用，该过程称为方法定义。</p><p>​            方法创建后不是直接运行的，需要手动使用后才执行，该过程称为方法调用。</p><p>​            方法必须先定义后调用，否则程序将报错。</p></li></ul></li><li><p>方法的定义和调用</p><p>定义格式：public static void 方法名(){</p><p>​                    方法体</p><p>​            }</p><p>调用格式：方法名();</p><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://s2.loli.net/2022/01/19/BSFu86Yt9mTXxHA.jpg"></h1></li><li><p>带参数方法的定义和调用</p><ul><li><p>定义</p><ul><li>格式(单个参数)：public static void 方法名(数据类型 变量名) {······}</li><li>格式(多个参数)：public static void 方法名(数据类型 变量名1，数据类型 变量名2，······) {······}</li></ul></li><li><p>调用</p><ul><li><p>格式(单个参数)：方法名(变量名/常量值)；</p></li><li><p>格式(多个参数)：方法名(变量名1/常量值1，变量名2/常量值2······)；</p></li></ul></li><li><p>形参(方法定义中的参数)</p><p>实参(方法调用中的参数)</p></li></ul></li><li><p>带返回值方法的定义和调用</p><ul><li><p>定义格式(方法通用格式)：public static 数据类型 方法名(参数) {</p><p>​                            方法体；</p><p>​                            return 数据；</p><p>​                    }</p><p>数据(返回值)类型和数据要匹配。</p><p>public static是修饰符。</p></li><li><p>调用格式1：方法名(参数)；</p><p>调用格式2：数据类型 变量名 = 方法名(参数)；</p><p>方法的返回值通常用变量接收，否则该返回值无意义。</p></li></ul><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://s2.loli.net/2022/01/20/j5rp4EbYSd6yBNe.jpg" style="zoom:50%;" /></h1></li><li><p>方法的注意事项</p><ul><li><p>方法不能嵌套定义。</p></li><li><p>void表示无返回值，可以省略return，也可以单独书写return(一般不写)。</p><p>void类型的方法直接调用即可，非void类型的方法推荐接收调用。</p><img src="https://s2.loli.net/2022/01/20/qVTeUR86uvar4Ep.jpg" style="zoom:50%;" /></li></ul></li><li><p>方法重载</p><ol><li><p>方法重载概述</p><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载：</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数不同，类型不同或数量不同</li></ul><p>同类同名不同参。</p></li><li><p>方法重载的特点</p><ul><li><p>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</p></li><li><p>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关(不能通过返回值来判定两个方法是否相互构成重载)</p><img src="https://s2.loli.net/2022/01/20/rwdGQnoA9xB4uRp.jpg" style="zoom:50%;" /></li></ul></li></ol></li><li><p>方法的参数传递</p><ul><li><p>基本类型</p><p>对于基本数据类型的参数，形式参数的改变不影响实际参数的值。</p><img src="https://s2.loli.net/2022/01/20/QFvpZeoJNRzkUdm.jpg" style="zoom:67%;" /><img src="https://s2.loli.net/2022/01/20/R5FjNMqeH8EXGQb.jpg" style="zoom:67%;" /><p>该例两个方法中定义的number都是局部变量，只是名字相同，但物理地址、逻辑地址不同。</p><p>实参和形参占据的是两块不同的内存。</p></li><li><p>引用类型</p><p>对于引用类型的参数，形式参数的改变影响实际参数的值。</p><p><img src="https://s2.loli.net/2022/01/20/SLmT2hEZve6WkwM.jpg" style="zoom:67%;" /><img src="https://s2.loli.net/2022/01/20/ABGdS4yntLCvFMp.jpg" style="zoom:67%;" /><img src="https://s2.loli.net/2022/01/20/hQHJtgG2dTa9ecD.jpg" style="zoom:67%;" /></p></li></ul></li></ol><h3 id="11-Debug"><a href="#11-Debug" class="headerlink" title="11.Debug"></a>11.Debug</h3><ol><li><p>Debug概述</p><p>是程序调试工具，可用于查看程序的执行流程，也可用于追踪程序执行过程来调试程序。</p></li><li><p>Debug操作流程</p><p>Debug调试，又称断点调试，断点其实是一个标记，告诉我们从哪里开始查看。</p><ul><li><p>如何加断点</p><p>选择要设置断点的代码行，在行号的区域后面单击鼠标左键</p></li><li><p>如何运行加了断点的程序</p><p>代码区域右键Debug执行</p></li><li><p>看哪里</p><p>Debugger窗口，左边看代码执行到哪里，右边看代码执行过程中变量的变化</p><p>Console窗口，看程序执行过程中的结果展示</p></li><li><p>点哪里</p><p>继续执行：Step Into(F7)这个箭头，也可以直接按F7</p><p>结束：Stop</p></li><li><p>如何删除断点</p><p>选择要删除的断点，单击左键</p><p>或者点结束下面那个勾选，再点减号，再点Done</p></li></ul></li><li><p>注意事项</p><p>如果数据来自于键盘输入，一定要记得手动输入。</p></li></ol><h3 id="12-小练习"><a href="#12-小练习" class="headerlink" title="12.小练习"></a>12.小练习</h3><ul><li><p>导包</p><ul><li>手动导包：import java.util.Scanner;</li><li>快捷键导包：Alt + Enter</li><li>自动导包：创建对象时只输入一部分然后Enter</li></ul></li><li><p>取余结果为0是整除</p></li><li><img src="https://s2.loli.net/2022/01/20/veQIOLh6c87VbMs.jpg" style="zoom:50%;" /></li><li><p>反转</p><p><img src="https://s2.loli.net/2022/01/20/TvFCifQoL6JtdwV.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/20/n1Rvtr3cLXz9gG4.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/20/6pROCM3YsgEtVX8.jpg" style="zoom:50%;" /></p></li><li><p>方法中执行到return就立即返回</p><img src="https://s2.loli.net/2022/01/20/AepoGvWciNqs69x.png" style="zoom:50%;" /></li><li><p>斐波那契数列</p><img src="https://s2.loli.net/2022/01/20/otIlfmiFd8Ay43s.jpg" style="zoom:50%;" /><img src="https://s2.loli.net/2022/01/20/WXDNiuF1bOZLH76.jpg" style="zoom:50%;" /></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-Java概述&quot;&gt;&lt;a href=&quot;#1-Java概述&quot; class=&quot;headerlink&quot; title=&quot;1.Java概述&quot;&gt;&lt;/a&gt;1.Java概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java语言跨平台原理：在需要运行Java应用程序的操作系统上，安装一个与操作系</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>learn to use typora</title>
    <link href="http://example.com/2022/01/17/learn%20to%20use%20typora/"/>
    <id>http://example.com/2022/01/17/learn%20to%20use%20typora/</id>
    <published>2022-01-17T11:55:34.810Z</published>
    <updated>2022-01-21T02:21:14.964Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><p>Ctrl+n :  n级标题</p><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><p>正文</p><h3 id="2-引用"><a href="#2-引用" class="headerlink" title="2.引用"></a>2.引用</h3><p>引用 :  &gt; + 空格</p><p>退出引用 :  Shift + Tab</p><p>角标 :  </p><p>方括号里括^和数字</p><p>角标<a href="%E5%87%BA%E8%87%AA%C2%B7%C2%B7%C2%B7%C2%B7%C2%B7%C2%B7">^1</a></p><blockquote><p>引用</p></blockquote><h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h3><p>无序列表 :  Ctrl + Shift + ]</p><p>子列表 :  Tab</p><p>回退 :  Shift + Tab</p><ul><li>列表</li><li>列表<ul><li>子列表<ul><li>子列表again</li></ul></li><li>回退到上一个子列表</li></ul></li><li>再回退</li></ul><p>有序列表 :  Ctrl + Shift +[</p><ol><li>列表</li><li>列表<ol><li>子列表</li></ol></li></ol><h3 id="4-链接"><a href="#4-链接" class="headerlink" title="4.链接"></a>4.链接</h3><p>[链接名称] + (地址)</p><p><a href="www.baidu.com">百度</a></p><h3 id="5-图像"><a href="#5-图像" class="headerlink" title="5.图像"></a>5.图像</h3><p><img src="https://s2.loli.net/2022/01/17/xb8MypS2BOLKavU.jpg"></p><h3 id="6-划重点"><a href="#6-划重点" class="headerlink" title="6.划重点"></a>6.划重点</h3><p>高亮 :   <img src="https://s2.loli.net/2022/01/17/IiqoHKBjLxzGdwb.png"></p><p>==高亮==</p><p>加粗 ：Ctrl + B</p><p><strong>加粗</strong></p><p>两个*中间夹斜体</p><p><em>斜体</em></p><h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7.表格"></a>7.表格</h3><p>插入表格 ：Ctrl + T</p><table><thead><tr><th>chen</th><th></th><th></th></tr></thead><tbody><tr><td>zhang</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.代码块"></a>8.代码块</h3><p>输入3个*并按回车</p><hr><p>int c=1;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-标题&quot;&gt;&lt;a href=&quot;#1-标题&quot; class=&quot;headerlink&quot; title=&quot;1.标题&quot;&gt;&lt;/a&gt;1.标题&lt;/h3&gt;&lt;p&gt;Ctrl+n :  n级标题&lt;/p&gt;
&lt;h1 id=&quot;标题1&quot;&gt;&lt;a href=&quot;#标题1&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/11/23/hello-world/"/>
    <id>http://example.com/2021/11/23/hello-world/</id>
    <published>2021-11-23T00:27:48.068Z</published>
    <updated>2021-11-23T00:27:48.068Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
